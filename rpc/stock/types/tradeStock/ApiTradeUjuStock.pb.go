// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: desc/ApiTradeUjuStock.proto

package tradeStock

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//（类型（0、上证、1、深圳2、港股、3、深港通4、沪港通、5、沪深股通（港股购买A股）））
type TradeExchangeType int32

const (
	//上证(a股)
	TradeExchangeType_SH TradeExchangeType = 0
	//深圳 (a股)
	TradeExchangeType_SZ TradeExchangeType = 1
	//2、港股、
	TradeExchangeType_HShare TradeExchangeType = 2
	//3、深港通
	TradeExchangeType_SZ_HK_STOCK_CONNECT TradeExchangeType = 3
	//4、沪港通
	TradeExchangeType_SH_HK_STOCK_CONNECT TradeExchangeType = 4
	//5、沪深股通（港股购买A股）陆股通
	TradeExchangeType_HK_ASHARES_STOCK_CONNECT TradeExchangeType = 5
)

// Enum value maps for TradeExchangeType.
var (
	TradeExchangeType_name = map[int32]string{
		0: "SH",
		1: "SZ",
		2: "HShare",
		3: "SZ_HK_STOCK_CONNECT",
		4: "SH_HK_STOCK_CONNECT",
		5: "HK_ASHARES_STOCK_CONNECT",
	}
	TradeExchangeType_value = map[string]int32{
		"SH":                       0,
		"SZ":                       1,
		"HShare":                   2,
		"SZ_HK_STOCK_CONNECT":      3,
		"SH_HK_STOCK_CONNECT":      4,
		"HK_ASHARES_STOCK_CONNECT": 5,
	}
)

func (x TradeExchangeType) Enum() *TradeExchangeType {
	p := new(TradeExchangeType)
	*p = x
	return p
}

func (x TradeExchangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeExchangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[0].Descriptor()
}

func (TradeExchangeType) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[0]
}

func (x TradeExchangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeExchangeType.Descriptor instead.
func (TradeExchangeType) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{0}
}

type HkPriceType int32

const (
	//报价类型：增强限价
	HkPriceType_enhance_price HkPriceType = 0
	//、竞价限价
	HkPriceType_bidding_price HkPriceType = 1
	//、碎股卖出
	HkPriceType_fragmentary_stock HkPriceType = 2
)

// Enum value maps for HkPriceType.
var (
	HkPriceType_name = map[int32]string{
		0: "enhance_price",
		1: "bidding_price",
		2: "fragmentary_stock",
	}
	HkPriceType_value = map[string]int32{
		"enhance_price":     0,
		"bidding_price":     1,
		"fragmentary_stock": 2,
	}
)

func (x HkPriceType) Enum() *HkPriceType {
	p := new(HkPriceType)
	*p = x
	return p
}

func (x HkPriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HkPriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[1].Descriptor()
}

func (HkPriceType) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[1]
}

func (x HkPriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HkPriceType.Descriptor instead.
func (HkPriceType) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{1}
}

type Header_Type int32

const (
	Header_SERVICE_REQ    Header_Type = 0 // 业务请求消息
	Header_SERVICE_RESP   Header_Type = 1 // 业务响应消息
	Header_ONE_WAY        Header_Type = 2 // 业务 ONE WAY消息，既是请求消息，又是响应消息
	Header_LOGIN_REQ      Header_Type = 3 // 登录请求
	Header_LOGIN_RESP     Header_Type = 4 // 登录响应
	Header_HEARTBEAT_REQ  Header_Type = 5 // 心跳请求消息
	Header_HEARTBEAT_RESP Header_Type = 6 // 心跳响应消息
)

// Enum value maps for Header_Type.
var (
	Header_Type_name = map[int32]string{
		0: "SERVICE_REQ",
		1: "SERVICE_RESP",
		2: "ONE_WAY",
		3: "LOGIN_REQ",
		4: "LOGIN_RESP",
		5: "HEARTBEAT_REQ",
		6: "HEARTBEAT_RESP",
	}
	Header_Type_value = map[string]int32{
		"SERVICE_REQ":    0,
		"SERVICE_RESP":   1,
		"ONE_WAY":        2,
		"LOGIN_REQ":      3,
		"LOGIN_RESP":     4,
		"HEARTBEAT_REQ":  5,
		"HEARTBEAT_RESP": 6,
	}
)

func (x Header_Type) Enum() *Header_Type {
	p := new(Header_Type)
	*p = x
	return p
}

func (x Header_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Header_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[2].Descriptor()
}

func (Header_Type) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[2]
}

func (x Header_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Header_Type.Descriptor instead.
func (Header_Type) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{2, 0}
}

type LoginRespMessage_LoginResult int32

const (
	LoginRespMessage_SUCCESS LoginRespMessage_LoginResult = 0
	// 用户名或者密码不正确
	LoginRespMessage_FAIL LoginRespMessage_LoginResult = 1
	// 验证码不正确
	LoginRespMessage_VERCODENOTFIT LoginRespMessage_LoginResult = 3
	// 挤下线，已退出登录
	LoginRespMessage_EDGE_OUT         LoginRespMessage_LoginResult = 4
	LoginRespMessage_NO_USER          LoginRespMessage_LoginResult = 5 //没有这个用户
	LoginRespMessage_TOO_MANY_CLIENTS LoginRespMessage_LoginResult = 6 //太多客户端
	LoginRespMessage_FROZEN           LoginRespMessage_LoginResult = 7 //该账号已冻结，不能登录
)

// Enum value maps for LoginRespMessage_LoginResult.
var (
	LoginRespMessage_LoginResult_name = map[int32]string{
		0: "SUCCESS",
		1: "FAIL",
		3: "VERCODENOTFIT",
		4: "EDGE_OUT",
		5: "NO_USER",
		6: "TOO_MANY_CLIENTS",
		7: "FROZEN",
	}
	LoginRespMessage_LoginResult_value = map[string]int32{
		"SUCCESS":          0,
		"FAIL":             1,
		"VERCODENOTFIT":    3,
		"EDGE_OUT":         4,
		"NO_USER":          5,
		"TOO_MANY_CLIENTS": 6,
		"FROZEN":           7,
	}
)

func (x LoginRespMessage_LoginResult) Enum() *LoginRespMessage_LoginResult {
	p := new(LoginRespMessage_LoginResult)
	*p = x
	return p
}

func (x LoginRespMessage_LoginResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginRespMessage_LoginResult) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[3].Descriptor()
}

func (LoginRespMessage_LoginResult) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[3]
}

func (x LoginRespMessage_LoginResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginRespMessage_LoginResult.Descriptor instead.
func (LoginRespMessage_LoginResult) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{4, 0}
}

type ReqMessage_ReqMsgType int32

const (
	ReqMessage_STOCK_QRY                      ReqMessage_ReqMsgType = 0  // 搜索股票
	ReqMessage_ACOUNT_INFO_QRY                ReqMessage_ReqMsgType = 1  // 账户信息查询
	ReqMessage_POSITION_QRY                   ReqMessage_ReqMsgType = 2  // 持仓查询
	ReqMessage_ENTRUST_QRY                    ReqMessage_ReqMsgType = 3  // 委托查询
	ReqMessage_DEAL_QRY                       ReqMessage_ReqMsgType = 4  // 成交查询
	ReqMessage_STATEMENT_QRY                  ReqMessage_ReqMsgType = 5  //对账单查询
	ReqMessage_ORDER                          ReqMessage_ReqMsgType = 6  //下单
	ReqMessage_CANCELORDER                    ReqMessage_ReqMsgType = 7  //撤单
	ReqMessage_POSITION_CHANGE                ReqMessage_ReqMsgType = 8  //持仓有变动
	ReqMessage_DEAL_RESP                      ReqMessage_ReqMsgType = 9  //成交回报
	ReqMessage_ORDER_CONFIRM_RESP             ReqMessage_ReqMsgType = 10 //下单确认
	ReqMessage_CANCEL_ORDER_CONFIRM_RESP      ReqMessage_ReqMsgType = 11 //撤单确认
	ReqMessage_Client_POSITION_QRY            ReqMessage_ReqMsgType = 12 //客户 持仓查询
	ReqMessage_Client_ENTRUST_QRY             ReqMessage_ReqMsgType = 13 //客户 委托查询
	ReqMessage_Client_DEAL_QRY                ReqMessage_ReqMsgType = 14 //客户 成交查询
	ReqMessage_T0_Profit_Statistics           ReqMessage_ReqMsgType = 15 //利润统计
	ReqMessage_T0_Position_Usable             ReqMessage_ReqMsgType = 16 //可用股数
	ReqMessage_Push_Order                     ReqMessage_ReqMsgType = 17 //推送订单变化
	ReqMessage_Push_Accountinfo               ReqMessage_ReqMsgType = 18 //推送账户信息
	ReqMessage_Add_Opt                        ReqMessage_ReqMsgType = 19 //新增自选股
	ReqMessage_Delete_Opt                     ReqMessage_ReqMsgType = 20 //删除自选股
	ReqMessage_Opt_Qry                        ReqMessage_ReqMsgType = 21 //查询自选股
	ReqMessage_Change_Remark                  ReqMessage_ReqMsgType = 22 // 修改子账户备注
	ReqMessage_CANCELORDER_BATCH              ReqMessage_ReqMsgType = 23 //批量撤单
	ReqMessage_Modify_Opt_Remark              ReqMessage_ReqMsgType = 24 //修改备注
	ReqMessage_Push_CommissionTemplate        ReqMessage_ReqMsgType = 25 //推送手续费率模板
	ReqMessage_BATCH_ORDER                    ReqMessage_ReqMsgType = 26 //批量 下单
	ReqMessage_CONDITION_ORDER_LIST           ReqMessage_ReqMsgType = 27 // 条件单列表（未触发）
	ReqMessage_CONDITION_ORDER_LIST_TRIGGERED ReqMessage_ReqMsgType = 28 // 已触发 条件单列表
	ReqMessage_CONDITION_ORDER_LIST_EXPIRED   ReqMessage_ReqMsgType = 29 //已过期 条件单列表
	ReqMessage_CONDITION_ORDER_ADD            ReqMessage_ReqMsgType = 30 // 添加条件单
	ReqMessage_CONDITION_ORDER_MODIFY         ReqMessage_ReqMsgType = 31 // 编辑条件单
	ReqMessage_CONDITION_ORDER_CHANGE_STATUS  ReqMessage_ReqMsgType = 32 //修改运行状态
	ReqMessage_CONDITION_ORDER_DELETE         ReqMessage_ReqMsgType = 33 //删除条件单
	ReqMessage_PUSH_CONDITION_ORDER_TRIGGER   ReqMessage_ReqMsgType = 34 //推送 条件单触发
	ReqMessage_CONDITION_ORDER_CONFIRM        ReqMessage_ReqMsgType = 35 //手动确认下单
	ReqMessage_CHANGE_PASSWORD                ReqMessage_ReqMsgType = 36 //修改密码
	ReqMessage_QUERY_HK_STOCK_INFO            ReqMessage_ReqMsgType = 37 //获取港股基本信息
	ReqMessage_QUERY_CONSULT_EXCHANGE_RATE    ReqMessage_ReqMsgType = 38 //获取交易所买卖汇率
)

// Enum value maps for ReqMessage_ReqMsgType.
var (
	ReqMessage_ReqMsgType_name = map[int32]string{
		0:  "STOCK_QRY",
		1:  "ACOUNT_INFO_QRY",
		2:  "POSITION_QRY",
		3:  "ENTRUST_QRY",
		4:  "DEAL_QRY",
		5:  "STATEMENT_QRY",
		6:  "ORDER",
		7:  "CANCELORDER",
		8:  "POSITION_CHANGE",
		9:  "DEAL_RESP",
		10: "ORDER_CONFIRM_RESP",
		11: "CANCEL_ORDER_CONFIRM_RESP",
		12: "Client_POSITION_QRY",
		13: "Client_ENTRUST_QRY",
		14: "Client_DEAL_QRY",
		15: "T0_Profit_Statistics",
		16: "T0_Position_Usable",
		17: "Push_Order",
		18: "Push_Accountinfo",
		19: "Add_Opt",
		20: "Delete_Opt",
		21: "Opt_Qry",
		22: "Change_Remark",
		23: "CANCELORDER_BATCH",
		24: "Modify_Opt_Remark",
		25: "Push_CommissionTemplate",
		26: "BATCH_ORDER",
		27: "CONDITION_ORDER_LIST",
		28: "CONDITION_ORDER_LIST_TRIGGERED",
		29: "CONDITION_ORDER_LIST_EXPIRED",
		30: "CONDITION_ORDER_ADD",
		31: "CONDITION_ORDER_MODIFY",
		32: "CONDITION_ORDER_CHANGE_STATUS",
		33: "CONDITION_ORDER_DELETE",
		34: "PUSH_CONDITION_ORDER_TRIGGER",
		35: "CONDITION_ORDER_CONFIRM",
		36: "CHANGE_PASSWORD",
		37: "QUERY_HK_STOCK_INFO",
		38: "QUERY_CONSULT_EXCHANGE_RATE",
	}
	ReqMessage_ReqMsgType_value = map[string]int32{
		"STOCK_QRY":                      0,
		"ACOUNT_INFO_QRY":                1,
		"POSITION_QRY":                   2,
		"ENTRUST_QRY":                    3,
		"DEAL_QRY":                       4,
		"STATEMENT_QRY":                  5,
		"ORDER":                          6,
		"CANCELORDER":                    7,
		"POSITION_CHANGE":                8,
		"DEAL_RESP":                      9,
		"ORDER_CONFIRM_RESP":             10,
		"CANCEL_ORDER_CONFIRM_RESP":      11,
		"Client_POSITION_QRY":            12,
		"Client_ENTRUST_QRY":             13,
		"Client_DEAL_QRY":                14,
		"T0_Profit_Statistics":           15,
		"T0_Position_Usable":             16,
		"Push_Order":                     17,
		"Push_Accountinfo":               18,
		"Add_Opt":                        19,
		"Delete_Opt":                     20,
		"Opt_Qry":                        21,
		"Change_Remark":                  22,
		"CANCELORDER_BATCH":              23,
		"Modify_Opt_Remark":              24,
		"Push_CommissionTemplate":        25,
		"BATCH_ORDER":                    26,
		"CONDITION_ORDER_LIST":           27,
		"CONDITION_ORDER_LIST_TRIGGERED": 28,
		"CONDITION_ORDER_LIST_EXPIRED":   29,
		"CONDITION_ORDER_ADD":            30,
		"CONDITION_ORDER_MODIFY":         31,
		"CONDITION_ORDER_CHANGE_STATUS":  32,
		"CONDITION_ORDER_DELETE":         33,
		"PUSH_CONDITION_ORDER_TRIGGER":   34,
		"CONDITION_ORDER_CONFIRM":        35,
		"CHANGE_PASSWORD":                36,
		"QUERY_HK_STOCK_INFO":            37,
		"QUERY_CONSULT_EXCHANGE_RATE":    38,
	}
)

func (x ReqMessage_ReqMsgType) Enum() *ReqMessage_ReqMsgType {
	p := new(ReqMessage_ReqMsgType)
	*p = x
	return p
}

func (x ReqMessage_ReqMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReqMessage_ReqMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[4].Descriptor()
}

func (ReqMessage_ReqMsgType) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[4]
}

func (x ReqMessage_ReqMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReqMessage_ReqMsgType.Descriptor instead.
func (ReqMessage_ReqMsgType) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{5, 0}
}

type RespMessage_RespCode int32

const (
	RespMessage_OK   RespMessage_RespCode = 0
	RespMessage_FAIL RespMessage_RespCode = 1 // 失败
)

// Enum value maps for RespMessage_RespCode.
var (
	RespMessage_RespCode_name = map[int32]string{
		0: "OK",
		1: "FAIL",
	}
	RespMessage_RespCode_value = map[string]int32{
		"OK":   0,
		"FAIL": 1,
	}
)

func (x RespMessage_RespCode) Enum() *RespMessage_RespCode {
	p := new(RespMessage_RespCode)
	*p = x
	return p
}

func (x RespMessage_RespCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RespMessage_RespCode) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[5].Descriptor()
}

func (RespMessage_RespCode) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[5]
}

func (x RespMessage_RespCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RespMessage_RespCode.Descriptor instead.
func (RespMessage_RespCode) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{6, 0}
}

type EntrustInfoResp_EntrustType int32

const (
	EntrustInfoResp_buy  EntrustInfoResp_EntrustType = 0
	EntrustInfoResp_sell EntrustInfoResp_EntrustType = 1
)

// Enum value maps for EntrustInfoResp_EntrustType.
var (
	EntrustInfoResp_EntrustType_name = map[int32]string{
		0: "buy",
		1: "sell",
	}
	EntrustInfoResp_EntrustType_value = map[string]int32{
		"buy":  0,
		"sell": 1,
	}
)

func (x EntrustInfoResp_EntrustType) Enum() *EntrustInfoResp_EntrustType {
	p := new(EntrustInfoResp_EntrustType)
	*p = x
	return p
}

func (x EntrustInfoResp_EntrustType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntrustInfoResp_EntrustType) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[6].Descriptor()
}

func (EntrustInfoResp_EntrustType) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[6]
}

func (x EntrustInfoResp_EntrustType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntrustInfoResp_EntrustType.Descriptor instead.
func (EntrustInfoResp_EntrustType) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{10, 0}
}

type EntrustInfoResp_EntrustStatus int32

const (
	EntrustInfoResp_qbcj     EntrustInfoResp_EntrustStatus = 0  //0、全部成交
	EntrustInfoResp_bfcj     EntrustInfoResp_EntrustStatus = 1  //1，部分成交,
	EntrustInfoResp_bfcd     EntrustInfoResp_EntrustStatus = 2  //2、部分撤单
	EntrustInfoResp_ysb      EntrustInfoResp_EntrustStatus = 3  //3、已申报
	EntrustInfoResp_wsb      EntrustInfoResp_EntrustStatus = 4  //4、未申报
	EntrustInfoResp_cd       EntrustInfoResp_EntrustStatus = 5  //5、撤单
	EntrustInfoResp_wz       EntrustInfoResp_EntrustStatus = 6  //a、未知
	EntrustInfoResp_wcf      EntrustInfoResp_EntrustStatus = 7  //b、未触发
	EntrustInfoResp_ycf      EntrustInfoResp_EntrustStatus = 8  //c、已触发
	EntrustInfoResp_applying EntrustInfoResp_EntrustStatus = -1 //申请中
)

// Enum value maps for EntrustInfoResp_EntrustStatus.
var (
	EntrustInfoResp_EntrustStatus_name = map[int32]string{
		0:  "qbcj",
		1:  "bfcj",
		2:  "bfcd",
		3:  "ysb",
		4:  "wsb",
		5:  "cd",
		6:  "wz",
		7:  "wcf",
		8:  "ycf",
		-1: "applying",
	}
	EntrustInfoResp_EntrustStatus_value = map[string]int32{
		"qbcj":     0,
		"bfcj":     1,
		"bfcd":     2,
		"ysb":      3,
		"wsb":      4,
		"cd":       5,
		"wz":       6,
		"wcf":      7,
		"ycf":      8,
		"applying": -1,
	}
)

func (x EntrustInfoResp_EntrustStatus) Enum() *EntrustInfoResp_EntrustStatus {
	p := new(EntrustInfoResp_EntrustStatus)
	*p = x
	return p
}

func (x EntrustInfoResp_EntrustStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntrustInfoResp_EntrustStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[7].Descriptor()
}

func (EntrustInfoResp_EntrustStatus) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[7]
}

func (x EntrustInfoResp_EntrustStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntrustInfoResp_EntrustStatus.Descriptor instead.
func (EntrustInfoResp_EntrustStatus) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{10, 1}
}

type DealInfoResp_DealType int32

const (
	DealInfoResp_buy  DealInfoResp_DealType = 0
	DealInfoResp_sell DealInfoResp_DealType = 1
)

// Enum value maps for DealInfoResp_DealType.
var (
	DealInfoResp_DealType_name = map[int32]string{
		0: "buy",
		1: "sell",
	}
	DealInfoResp_DealType_value = map[string]int32{
		"buy":  0,
		"sell": 1,
	}
)

func (x DealInfoResp_DealType) Enum() *DealInfoResp_DealType {
	p := new(DealInfoResp_DealType)
	*p = x
	return p
}

func (x DealInfoResp_DealType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DealInfoResp_DealType) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[8].Descriptor()
}

func (DealInfoResp_DealType) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[8]
}

func (x DealInfoResp_DealType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DealInfoResp_DealType.Descriptor instead.
func (DealInfoResp_DealType) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{11, 0}
}

type StatementInfoResp_StatementType int32

const (
	StatementInfoResp_buy  StatementInfoResp_StatementType = 0
	StatementInfoResp_sell StatementInfoResp_StatementType = 1
)

// Enum value maps for StatementInfoResp_StatementType.
var (
	StatementInfoResp_StatementType_name = map[int32]string{
		0: "buy",
		1: "sell",
	}
	StatementInfoResp_StatementType_value = map[string]int32{
		"buy":  0,
		"sell": 1,
	}
)

func (x StatementInfoResp_StatementType) Enum() *StatementInfoResp_StatementType {
	p := new(StatementInfoResp_StatementType)
	*p = x
	return p
}

func (x StatementInfoResp_StatementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatementInfoResp_StatementType) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[9].Descriptor()
}

func (StatementInfoResp_StatementType) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[9]
}

func (x StatementInfoResp_StatementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatementInfoResp_StatementType.Descriptor instead.
func (StatementInfoResp_StatementType) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{12, 0}
}

type OrderReq_OrderType int32

const (
	OrderReq_buy  OrderReq_OrderType = 0
	OrderReq_sell OrderReq_OrderType = 1
)

// Enum value maps for OrderReq_OrderType.
var (
	OrderReq_OrderType_name = map[int32]string{
		0: "buy",
		1: "sell",
	}
	OrderReq_OrderType_value = map[string]int32{
		"buy":  0,
		"sell": 1,
	}
)

func (x OrderReq_OrderType) Enum() *OrderReq_OrderType {
	p := new(OrderReq_OrderType)
	*p = x
	return p
}

func (x OrderReq_OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderReq_OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[10].Descriptor()
}

func (OrderReq_OrderType) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[10]
}

func (x OrderReq_OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderReq_OrderType.Descriptor instead.
func (OrderReq_OrderType) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{13, 0}
}

type PassiveOrderInfo_OrderFlag int32

const (
	PassiveOrderInfo_undefined PassiveOrderInfo_OrderFlag = 0
	PassiveOrderInfo_normal    PassiveOrderInfo_OrderFlag = 1
	PassiveOrderInfo_passive   PassiveOrderInfo_OrderFlag = 2
)

// Enum value maps for PassiveOrderInfo_OrderFlag.
var (
	PassiveOrderInfo_OrderFlag_name = map[int32]string{
		0: "undefined",
		1: "normal",
		2: "passive",
	}
	PassiveOrderInfo_OrderFlag_value = map[string]int32{
		"undefined": 0,
		"normal":    1,
		"passive":   2,
	}
)

func (x PassiveOrderInfo_OrderFlag) Enum() *PassiveOrderInfo_OrderFlag {
	p := new(PassiveOrderInfo_OrderFlag)
	*p = x
	return p
}

func (x PassiveOrderInfo_OrderFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PassiveOrderInfo_OrderFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[11].Descriptor()
}

func (PassiveOrderInfo_OrderFlag) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[11]
}

func (x PassiveOrderInfo_OrderFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PassiveOrderInfo_OrderFlag.Descriptor instead.
func (PassiveOrderInfo_OrderFlag) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{14, 0}
}

type OrderResp_OrderRespType int32

const (
	OrderResp_success             OrderResp_OrderRespType = 0
	OrderResp_fail                OrderResp_OrderRespType = 1
	OrderResp_number_errror       OrderResp_OrderRespType = 2 //数量不正确必须大于0且被100整除
	OrderResp_code_error          OrderResp_OrderRespType = 3 //code不存在或不在范围内
	OrderResp_local_error         OrderResp_OrderRespType = 4 //本地编码错误
	OrderResp_account_error       OrderResp_OrderRespType = 5 //子账户错误
	OrderResp_position_over_error OrderResp_OrderRespType = 6 //超出持仓数
	OrderResp_position_no_error   OrderResp_OrderRespType = 7 //无持仓可以卖
	OrderResp_no_amount           OrderResp_OrderRespType = 8 //金额不足，
)

// Enum value maps for OrderResp_OrderRespType.
var (
	OrderResp_OrderRespType_name = map[int32]string{
		0: "success",
		1: "fail",
		2: "number_errror",
		3: "code_error",
		4: "local_error",
		5: "account_error",
		6: "position_over_error",
		7: "position_no_error",
		8: "no_amount",
	}
	OrderResp_OrderRespType_value = map[string]int32{
		"success":             0,
		"fail":                1,
		"number_errror":       2,
		"code_error":          3,
		"local_error":         4,
		"account_error":       5,
		"position_over_error": 6,
		"position_no_error":   7,
		"no_amount":           8,
	}
)

func (x OrderResp_OrderRespType) Enum() *OrderResp_OrderRespType {
	p := new(OrderResp_OrderRespType)
	*p = x
	return p
}

func (x OrderResp_OrderRespType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderResp_OrderRespType) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[12].Descriptor()
}

func (OrderResp_OrderRespType) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[12]
}

func (x OrderResp_OrderRespType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderResp_OrderRespType.Descriptor instead.
func (OrderResp_OrderRespType) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{15, 0}
}

type CancelOrderResp_CancelOrderType int32

const (
	CancelOrderResp_success CancelOrderResp_CancelOrderType = 0
	CancelOrderResp_fail    CancelOrderResp_CancelOrderType = 1
)

// Enum value maps for CancelOrderResp_CancelOrderType.
var (
	CancelOrderResp_CancelOrderType_name = map[int32]string{
		0: "success",
		1: "fail",
	}
	CancelOrderResp_CancelOrderType_value = map[string]int32{
		"success": 0,
		"fail":    1,
	}
)

func (x CancelOrderResp_CancelOrderType) Enum() *CancelOrderResp_CancelOrderType {
	p := new(CancelOrderResp_CancelOrderType)
	*p = x
	return p
}

func (x CancelOrderResp_CancelOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelOrderResp_CancelOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[13].Descriptor()
}

func (CancelOrderResp_CancelOrderType) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[13]
}

func (x CancelOrderResp_CancelOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelOrderResp_CancelOrderType.Descriptor instead.
func (CancelOrderResp_CancelOrderType) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{17, 0}
}

type EntrustBasicInfo_EntrustType int32

const (
	EntrustBasicInfo_buy  EntrustBasicInfo_EntrustType = 0
	EntrustBasicInfo_sell EntrustBasicInfo_EntrustType = 1
)

// Enum value maps for EntrustBasicInfo_EntrustType.
var (
	EntrustBasicInfo_EntrustType_name = map[int32]string{
		0: "buy",
		1: "sell",
	}
	EntrustBasicInfo_EntrustType_value = map[string]int32{
		"buy":  0,
		"sell": 1,
	}
)

func (x EntrustBasicInfo_EntrustType) Enum() *EntrustBasicInfo_EntrustType {
	p := new(EntrustBasicInfo_EntrustType)
	*p = x
	return p
}

func (x EntrustBasicInfo_EntrustType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntrustBasicInfo_EntrustType) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[14].Descriptor()
}

func (EntrustBasicInfo_EntrustType) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[14]
}

func (x EntrustBasicInfo_EntrustType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntrustBasicInfo_EntrustType.Descriptor instead.
func (EntrustBasicInfo_EntrustType) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{19, 0}
}

type DealResp_OrderType int32

const (
	DealResp_buy  DealResp_OrderType = 0
	DealResp_sell DealResp_OrderType = 1
)

// Enum value maps for DealResp_OrderType.
var (
	DealResp_OrderType_name = map[int32]string{
		0: "buy",
		1: "sell",
	}
	DealResp_OrderType_value = map[string]int32{
		"buy":  0,
		"sell": 1,
	}
)

func (x DealResp_OrderType) Enum() *DealResp_OrderType {
	p := new(DealResp_OrderType)
	*p = x
	return p
}

func (x DealResp_OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DealResp_OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_ApiTradeUjuStock_proto_enumTypes[15].Descriptor()
}

func (DealResp_OrderType) Type() protoreflect.EnumType {
	return &file_desc_ApiTradeUjuStock_proto_enumTypes[15]
}

func (x DealResp_OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DealResp_OrderType.Descriptor instead.
func (DealResp_OrderType) EnumDescriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{20, 0}
}

type WCMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息投
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 业务请求消息
	ReqMessage *ReqMessage `protobuf:"bytes,2,opt,name=reqMessage,proto3" json:"reqMessage,omitempty"`
	// 登录请求消息
	LoginReqMessage *LoginReqMessage `protobuf:"bytes,3,opt,name=loginReqMessage,proto3" json:"loginReqMessage,omitempty"`
	// 登录返回消息
	LoginRespMessage *LoginRespMessage `protobuf:"bytes,4,opt,name=loginRespMessage,proto3" json:"loginRespMessage,omitempty"`
	// 业务返回消息
	RespMessage *RespMessage `protobuf:"bytes,5,opt,name=respMessage,proto3" json:"respMessage,omitempty"`
	// 返回错误消息
	ErrorMessage *ErrorMessage `protobuf:"bytes,6,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *WCMessage) Reset() {
	*x = WCMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WCMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WCMessage) ProtoMessage() {}

func (x *WCMessage) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WCMessage.ProtoReflect.Descriptor instead.
func (*WCMessage) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{0}
}

func (x *WCMessage) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *WCMessage) GetReqMessage() *ReqMessage {
	if x != nil {
		return x.ReqMessage
	}
	return nil
}

func (x *WCMessage) GetLoginReqMessage() *LoginReqMessage {
	if x != nil {
		return x.LoginReqMessage
	}
	return nil
}

func (x *WCMessage) GetLoginRespMessage() *LoginRespMessage {
	if x != nil {
		return x.LoginRespMessage
	}
	return nil
}

func (x *WCMessage) GetRespMessage() *RespMessage {
	if x != nil {
		return x.RespMessage
	}
	return nil
}

func (x *WCMessage) GetErrorMessage() *ErrorMessage {
	if x != nil {
		return x.ErrorMessage
	}
	return nil
}

//异常消息
type ErrorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//0正常
	ErrorId int32  `protobuf:"varint,1,opt,name=errorId,proto3" json:"errorId,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorMessage) Reset() {
	*x = ErrorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessage) ProtoMessage() {}

func (x *ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessage.ProtoReflect.Descriptor instead.
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{1}
}

func (x *ErrorMessage) GetErrorId() int32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *ErrorMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrcCode int32       `protobuf:"varint,1,opt,name=crcCode,proto3" json:"crcCode,omitempty"` //netty消息校验码 主版本号 次版本号
	ChildId int32       `protobuf:"varint,2,opt,name=childId,proto3" json:"childId,omitempty"` // 用户标识
	Uuid    string      `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`        //用于每次会话标记jar包客户端使用
	Type    Header_Type `protobuf:"varint,4,opt,name=type,proto3,enum=tradeStock.Header_Type" json:"type,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{2}
}

func (x *Header) GetCrcCode() int32 {
	if x != nil {
		return x.CrcCode
	}
	return 0
}

func (x *Header) GetChildId() int32 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

func (x *Header) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Header) GetType() Header_Type {
	if x != nil {
		return x.Type
	}
	return Header_SERVICE_REQ
}

// 登录请求消息
type LoginReqMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户名
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// 密码
	Passwd string `protobuf:"bytes,2,opt,name=passwd,proto3" json:"passwd,omitempty"`
	// 验证码
	VerCode string `protobuf:"bytes,3,opt,name=verCode,proto3" json:"verCode,omitempty"`
	// token
	Token string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	// 公司id
	CompanyId string `protobuf:"bytes,5,opt,name=companyId,proto3" json:"companyId,omitempty"`
}

func (x *LoginReqMessage) Reset() {
	*x = LoginReqMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReqMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReqMessage) ProtoMessage() {}

func (x *LoginReqMessage) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReqMessage.ProtoReflect.Descriptor instead.
func (*LoginReqMessage) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{3}
}

func (x *LoginReqMessage) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginReqMessage) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

func (x *LoginReqMessage) GetVerCode() string {
	if x != nil {
		return x.VerCode
	}
	return ""
}

func (x *LoginReqMessage) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginReqMessage) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

// 登录返回消息
type LoginRespMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginResult     LoginRespMessage_LoginResult `protobuf:"varint,1,opt,name=loginResult,proto3,enum=tradeStock.LoginRespMessage_LoginResult" json:"loginResult,omitempty"`
	UserId          string                       `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	AccountInfoResp []*AccountInfoResp           `protobuf:"bytes,4,rep,name=accountInfoResp,proto3" json:"accountInfoResp,omitempty"`
}

func (x *LoginRespMessage) Reset() {
	*x = LoginRespMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRespMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRespMessage) ProtoMessage() {}

func (x *LoginRespMessage) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRespMessage.ProtoReflect.Descriptor instead.
func (*LoginRespMessage) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{4}
}

func (x *LoginRespMessage) GetLoginResult() LoginRespMessage_LoginResult {
	if x != nil {
		return x.LoginResult
	}
	return LoginRespMessage_SUCCESS
}

func (x *LoginRespMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LoginRespMessage) GetAccountInfoResp() []*AccountInfoResp {
	if x != nil {
		return x.AccountInfoResp
	}
	return nil
}

// 业务请求消息
type ReqMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                          ReqMessage_ReqMsgType          `protobuf:"varint,1,opt,name=type,proto3,enum=tradeStock.ReqMessage_ReqMsgType" json:"type,omitempty"`             // 请求类型
	StockCode                     string                         `protobuf:"bytes,2,opt,name=stockCode,proto3" json:"stockCode,omitempty"`                                          // 股票代码
	UserId                        string                         `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`                                                //子账号标识
	BeginTime                     string                         `protobuf:"bytes,4,opt,name=beginTime,proto3" json:"beginTime,omitempty"`                                          // 查询起始时间
	EndTime                       string                         `protobuf:"bytes,5,opt,name=endTime,proto3" json:"endTime,omitempty"`                                              // 查询起始时间
	OrderReq                      *OrderReq                      `protobuf:"bytes,6,opt,name=orderReq,proto3" json:"orderReq,omitempty"`                                            // 下单请求报文
	LocalOrderCode                string                         `protobuf:"bytes,7,opt,name=localOrderCode,proto3" json:"localOrderCode,omitempty"`                                // 本地报单编号
	AddOptReq                     *AddOptReq                     `protobuf:"bytes,8,opt,name=addOptReq,proto3" json:"addOptReq,omitempty"`                                          //添加自选请求
	DeleteOptReq                  *DeleteOptReq                  `protobuf:"bytes,9,opt,name=deleteOptReq,proto3" json:"deleteOptReq,omitempty"`                                    //删除自选请求
	RemarkReq                     *RemarkReq                     `protobuf:"bytes,10,opt,name=remarkReq,proto3" json:"remarkReq,omitempty"`                                         //修改备注请求
	LocalOrderCodeList            []string                       `protobuf:"bytes,11,rep,name=localOrderCodeList,proto3" json:"localOrderCodeList,omitempty"`                       //批量撤单 入参
	ModifyOptRemarkReq            *ModifyOptRemarkReq            `protobuf:"bytes,12,opt,name=modifyOptRemarkReq,proto3" json:"modifyOptRemarkReq,omitempty"`                       //修改自选备注
	BatchOrder                    []*OrderReq                    `protobuf:"bytes,13,rep,name=batchOrder,proto3" json:"batchOrder,omitempty"`                                       //批量下单
	ConditionOrderAddReq          *ConditionOrderAddReq          `protobuf:"bytes,14,opt,name=conditionOrderAddReq,proto3" json:"conditionOrderAddReq,omitempty"`                   // 添加/修改  条件单请求
	ConditionOrderChangeStatusReq *ConditionOrderChangeStatusReq `protobuf:"bytes,15,opt,name=conditionOrderChangeStatusReq,proto3" json:"conditionOrderChangeStatusReq,omitempty"` //修改条件单状态 （批量）
	ConditionOrderDeleteReq       *ConditionOrderDeleteReq       `protobuf:"bytes,16,opt,name=conditionOrderDeleteReq,proto3" json:"conditionOrderDeleteReq,omitempty"`             //删除条件单（批量）
	ConditionOrderConfirmReq      *ConditionOrderConfirmReq      `protobuf:"bytes,17,opt,name=ConditionOrderConfirmReq,proto3" json:"ConditionOrderConfirmReq,omitempty"`           //条件单 确认
	ChangePasswordReq             *ChangePasswordReq             `protobuf:"bytes,18,opt,name=changePasswordReq,proto3" json:"changePasswordReq,omitempty"`                         //修改密码
}

func (x *ReqMessage) Reset() {
	*x = ReqMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMessage) ProtoMessage() {}

func (x *ReqMessage) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMessage.ProtoReflect.Descriptor instead.
func (*ReqMessage) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{5}
}

func (x *ReqMessage) GetType() ReqMessage_ReqMsgType {
	if x != nil {
		return x.Type
	}
	return ReqMessage_STOCK_QRY
}

func (x *ReqMessage) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *ReqMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReqMessage) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *ReqMessage) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ReqMessage) GetOrderReq() *OrderReq {
	if x != nil {
		return x.OrderReq
	}
	return nil
}

func (x *ReqMessage) GetLocalOrderCode() string {
	if x != nil {
		return x.LocalOrderCode
	}
	return ""
}

func (x *ReqMessage) GetAddOptReq() *AddOptReq {
	if x != nil {
		return x.AddOptReq
	}
	return nil
}

func (x *ReqMessage) GetDeleteOptReq() *DeleteOptReq {
	if x != nil {
		return x.DeleteOptReq
	}
	return nil
}

func (x *ReqMessage) GetRemarkReq() *RemarkReq {
	if x != nil {
		return x.RemarkReq
	}
	return nil
}

func (x *ReqMessage) GetLocalOrderCodeList() []string {
	if x != nil {
		return x.LocalOrderCodeList
	}
	return nil
}

func (x *ReqMessage) GetModifyOptRemarkReq() *ModifyOptRemarkReq {
	if x != nil {
		return x.ModifyOptRemarkReq
	}
	return nil
}

func (x *ReqMessage) GetBatchOrder() []*OrderReq {
	if x != nil {
		return x.BatchOrder
	}
	return nil
}

func (x *ReqMessage) GetConditionOrderAddReq() *ConditionOrderAddReq {
	if x != nil {
		return x.ConditionOrderAddReq
	}
	return nil
}

func (x *ReqMessage) GetConditionOrderChangeStatusReq() *ConditionOrderChangeStatusReq {
	if x != nil {
		return x.ConditionOrderChangeStatusReq
	}
	return nil
}

func (x *ReqMessage) GetConditionOrderDeleteReq() *ConditionOrderDeleteReq {
	if x != nil {
		return x.ConditionOrderDeleteReq
	}
	return nil
}

func (x *ReqMessage) GetConditionOrderConfirmReq() *ConditionOrderConfirmReq {
	if x != nil {
		return x.ConditionOrderConfirmReq
	}
	return nil
}

func (x *ReqMessage) GetChangePasswordReq() *ChangePasswordReq {
	if x != nil {
		return x.ChangePasswordReq
	}
	return nil
}

// 业务消息返回
type RespMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqMsgType                     int32                           `protobuf:"varint,1,opt,name=ReqMsgType,proto3" json:"ReqMsgType,omitempty"`                                  //业务类型
	RespCode                       RespMessage_RespCode            `protobuf:"varint,2,opt,name=respCode,proto3,enum=tradeStock.RespMessage_RespCode" json:"respCode,omitempty"` //是否成功
	StockQryResp                   []*StockQryResp                 `protobuf:"bytes,3,rep,name=stockQryResp,proto3" json:"stockQryResp,omitempty"`                               // 股票查询 响应信息
	PositionInfoResp               []*PositionInfoResp             `protobuf:"bytes,4,rep,name=positionInfoResp,proto3" json:"positionInfoResp,omitempty"`                       //持仓查询 响应信息
	AccountInfoResp                []*AccountInfoResp              `protobuf:"bytes,5,rep,name=accountInfoResp,proto3" json:"accountInfoResp,omitempty"`                         //账户资金 响应信息
	EtrustInfoResp                 []*EntrustInfoResp              `protobuf:"bytes,6,rep,name=etrustInfoResp,proto3" json:"etrustInfoResp,omitempty"`                           //委托查询 响应信息
	DealInfoResp                   []*DealInfoResp                 `protobuf:"bytes,7,rep,name=dealInfoResp,proto3" json:"dealInfoResp,omitempty"`                               // 成交查询 响应信息
	StatementInfoResp              []*StatementInfoResp            `protobuf:"bytes,8,rep,name=statementInfoResp,proto3" json:"statementInfoResp,omitempty"`
	CancelOrderResp                *CancelOrderResp                `protobuf:"bytes,9,opt,name=cancelOrderResp,proto3" json:"cancelOrderResp,omitempty"`                                //撤单回报
	OrderResp                      *OrderResp                      `protobuf:"bytes,10,opt,name=orderResp,proto3" json:"orderResp,omitempty"`                                           //下单回报
	DealResp                       *DealResp                       `protobuf:"bytes,11,opt,name=dealResp,proto3" json:"dealResp,omitempty"`                                             //成交回报
	OrderCnfmResp                  *OrderConfirmResp               `protobuf:"bytes,12,opt,name=orderCnfmResp,proto3" json:"orderCnfmResp,omitempty"`                                   //废弃
	CancelOrderCnfmResp            *CancelOrderConfirmResp         `protobuf:"bytes,13,opt,name=cancelOrderCnfmResp,proto3" json:"cancelOrderCnfmResp,omitempty"`                       //废弃
	T0PositionStatisticsResp       *T0PositionStatisticsResp       `protobuf:"bytes,14,opt,name=t0PositionStatisticsResp,proto3" json:"t0PositionStatisticsResp,omitempty"`             //客户持仓
	T0UsablePositionResp           []*T0UsablePositionResp         `protobuf:"bytes,15,rep,name=t0UsablePositionResp,proto3" json:"t0UsablePositionResp,omitempty"`                     //t0 可用持仓
	T0ProfitStatisticsResp         *T0ProfitStatisticsResp         `protobuf:"bytes,16,opt,name=t0ProfitStatisticsResp,proto3" json:"t0ProfitStatisticsResp,omitempty"`                 //t0 收益统计
	PushPositionInfoResp           *PositionInfoResp               `protobuf:"bytes,17,opt,name=pushPositionInfoResp,proto3" json:"pushPositionInfoResp,omitempty"`                     //推送 持仓变动
	PushEntrustInfoResp            *EntrustInfoResp                `protobuf:"bytes,18,opt,name=pushEntrustInfoResp,proto3" json:"pushEntrustInfoResp,omitempty"`                       //委托状态变动
	PushAccountInfoResp            *AccountInfoResp                `protobuf:"bytes,19,opt,name=pushAccountInfoResp,proto3" json:"pushAccountInfoResp,omitempty"`                       //推送的账户信息
	ErrorMessage                   string                          `protobuf:"bytes,20,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`                                     //错误信息（通用）
	OptResp                        []*OptResp                      `protobuf:"bytes,21,rep,name=optResp,proto3" json:"optResp,omitempty"`                                               //自选股 列表
	BatchCancelOrderResp           []*CancelOrderResp              `protobuf:"bytes,22,rep,name=batchCancelOrderResp,proto3" json:"batchCancelOrderResp,omitempty"`                     //批量撤单回报
	PushCommissionTemplate         *PushCommissionTemplate         `protobuf:"bytes,23,opt,name=pushCommissionTemplate,proto3" json:"pushCommissionTemplate,omitempty"`                 //推送手续费率模板
	BatchOrderResp                 *BatchOrderResp                 `protobuf:"bytes,24,opt,name=batchOrderResp,proto3" json:"batchOrderResp,omitempty"`                                 //批量下单回报
	ConditionOrderList             []*ConditionOrder               `protobuf:"bytes,25,rep,name=conditionOrderList,proto3" json:"conditionOrderList,omitempty"`                         //条件单列表 （未触发、已触发、已过期）
	ConditionOrderAddResp          *ConditionOrderAddResp          `protobuf:"bytes,26,opt,name=conditionOrderAddResp,proto3" json:"conditionOrderAddResp,omitempty"`                   //条件单  添加 / 修改 响应
	ConditionOrderChangeStatusResp *ConditionOrderChangeStatusResp `protobuf:"bytes,27,opt,name=conditionOrderChangeStatusResp,proto3" json:"conditionOrderChangeStatusResp,omitempty"` //修改条件单状态 （批量）
	ConditionOrderDeleteResp       *ConditionOrderDeleteResp       `protobuf:"bytes,28,opt,name=conditionOrderDeleteResp,proto3" json:"conditionOrderDeleteResp,omitempty"`             //删除条件单（批量）
	PushConditionOrderTriggerd     *PushConditionOrderTriggerd     `protobuf:"bytes,29,opt,name=pushConditionOrderTriggerd,proto3" json:"pushConditionOrderTriggerd,omitempty"`         //条件单 触发 推送
	ConditionOrderConfirmResp      *ConditionOrderConfirmResp      `protobuf:"bytes,30,opt,name=ConditionOrderConfirmResp,proto3" json:"ConditionOrderConfirmResp,omitempty"`           //条件单 确认
	//港股基本信息
	StockInfoFieldResp []*HkStockInfoFieldResp `protobuf:"bytes,31,rep,name=stockInfoFieldResp,proto3" json:"stockInfoFieldResp,omitempty"`
	//汇率数据
	HkConsultExchangeRateFieldResp *HkConsultExchangeRateFieldResp `protobuf:"bytes,32,opt,name=hkConsultExchangeRateFieldResp,proto3" json:"hkConsultExchangeRateFieldResp,omitempty"`
}

func (x *RespMessage) Reset() {
	*x = RespMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespMessage) ProtoMessage() {}

func (x *RespMessage) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespMessage.ProtoReflect.Descriptor instead.
func (*RespMessage) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{6}
}

func (x *RespMessage) GetReqMsgType() int32 {
	if x != nil {
		return x.ReqMsgType
	}
	return 0
}

func (x *RespMessage) GetRespCode() RespMessage_RespCode {
	if x != nil {
		return x.RespCode
	}
	return RespMessage_OK
}

func (x *RespMessage) GetStockQryResp() []*StockQryResp {
	if x != nil {
		return x.StockQryResp
	}
	return nil
}

func (x *RespMessage) GetPositionInfoResp() []*PositionInfoResp {
	if x != nil {
		return x.PositionInfoResp
	}
	return nil
}

func (x *RespMessage) GetAccountInfoResp() []*AccountInfoResp {
	if x != nil {
		return x.AccountInfoResp
	}
	return nil
}

func (x *RespMessage) GetEtrustInfoResp() []*EntrustInfoResp {
	if x != nil {
		return x.EtrustInfoResp
	}
	return nil
}

func (x *RespMessage) GetDealInfoResp() []*DealInfoResp {
	if x != nil {
		return x.DealInfoResp
	}
	return nil
}

func (x *RespMessage) GetStatementInfoResp() []*StatementInfoResp {
	if x != nil {
		return x.StatementInfoResp
	}
	return nil
}

func (x *RespMessage) GetCancelOrderResp() *CancelOrderResp {
	if x != nil {
		return x.CancelOrderResp
	}
	return nil
}

func (x *RespMessage) GetOrderResp() *OrderResp {
	if x != nil {
		return x.OrderResp
	}
	return nil
}

func (x *RespMessage) GetDealResp() *DealResp {
	if x != nil {
		return x.DealResp
	}
	return nil
}

func (x *RespMessage) GetOrderCnfmResp() *OrderConfirmResp {
	if x != nil {
		return x.OrderCnfmResp
	}
	return nil
}

func (x *RespMessage) GetCancelOrderCnfmResp() *CancelOrderConfirmResp {
	if x != nil {
		return x.CancelOrderCnfmResp
	}
	return nil
}

func (x *RespMessage) GetT0PositionStatisticsResp() *T0PositionStatisticsResp {
	if x != nil {
		return x.T0PositionStatisticsResp
	}
	return nil
}

func (x *RespMessage) GetT0UsablePositionResp() []*T0UsablePositionResp {
	if x != nil {
		return x.T0UsablePositionResp
	}
	return nil
}

func (x *RespMessage) GetT0ProfitStatisticsResp() *T0ProfitStatisticsResp {
	if x != nil {
		return x.T0ProfitStatisticsResp
	}
	return nil
}

func (x *RespMessage) GetPushPositionInfoResp() *PositionInfoResp {
	if x != nil {
		return x.PushPositionInfoResp
	}
	return nil
}

func (x *RespMessage) GetPushEntrustInfoResp() *EntrustInfoResp {
	if x != nil {
		return x.PushEntrustInfoResp
	}
	return nil
}

func (x *RespMessage) GetPushAccountInfoResp() *AccountInfoResp {
	if x != nil {
		return x.PushAccountInfoResp
	}
	return nil
}

func (x *RespMessage) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RespMessage) GetOptResp() []*OptResp {
	if x != nil {
		return x.OptResp
	}
	return nil
}

func (x *RespMessage) GetBatchCancelOrderResp() []*CancelOrderResp {
	if x != nil {
		return x.BatchCancelOrderResp
	}
	return nil
}

func (x *RespMessage) GetPushCommissionTemplate() *PushCommissionTemplate {
	if x != nil {
		return x.PushCommissionTemplate
	}
	return nil
}

func (x *RespMessage) GetBatchOrderResp() *BatchOrderResp {
	if x != nil {
		return x.BatchOrderResp
	}
	return nil
}

func (x *RespMessage) GetConditionOrderList() []*ConditionOrder {
	if x != nil {
		return x.ConditionOrderList
	}
	return nil
}

func (x *RespMessage) GetConditionOrderAddResp() *ConditionOrderAddResp {
	if x != nil {
		return x.ConditionOrderAddResp
	}
	return nil
}

func (x *RespMessage) GetConditionOrderChangeStatusResp() *ConditionOrderChangeStatusResp {
	if x != nil {
		return x.ConditionOrderChangeStatusResp
	}
	return nil
}

func (x *RespMessage) GetConditionOrderDeleteResp() *ConditionOrderDeleteResp {
	if x != nil {
		return x.ConditionOrderDeleteResp
	}
	return nil
}

func (x *RespMessage) GetPushConditionOrderTriggerd() *PushConditionOrderTriggerd {
	if x != nil {
		return x.PushConditionOrderTriggerd
	}
	return nil
}

func (x *RespMessage) GetConditionOrderConfirmResp() *ConditionOrderConfirmResp {
	if x != nil {
		return x.ConditionOrderConfirmResp
	}
	return nil
}

func (x *RespMessage) GetStockInfoFieldResp() []*HkStockInfoFieldResp {
	if x != nil {
		return x.StockInfoFieldResp
	}
	return nil
}

func (x *RespMessage) GetHkConsultExchangeRateFieldResp() *HkConsultExchangeRateFieldResp {
	if x != nil {
		return x.HkConsultExchangeRateFieldResp
	}
	return nil
}

// 股票查询消息返回
type StockQryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 股票代码
	Stocks string `protobuf:"bytes,1,opt,name=stocks,proto3" json:"stocks,omitempty"`
	// 股票名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 总股本
	TotalCapital string `protobuf:"bytes,3,opt,name=totalCapital,proto3" json:"totalCapital,omitempty"`
	// 流通股本
	FlowCapital string `protobuf:"bytes,4,opt,name=flowCapital,proto3" json:"flowCapital,omitempty"`
	//交易所编码
	Exchange string `protobuf:"bytes,5,opt,name=exchange,proto3" json:"exchange,omitempty"`
}

func (x *StockQryResp) Reset() {
	*x = StockQryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockQryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockQryResp) ProtoMessage() {}

func (x *StockQryResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockQryResp.ProtoReflect.Descriptor instead.
func (*StockQryResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{7}
}

func (x *StockQryResp) GetStocks() string {
	if x != nil {
		return x.Stocks
	}
	return ""
}

func (x *StockQryResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StockQryResp) GetTotalCapital() string {
	if x != nil {
		return x.TotalCapital
	}
	return ""
}

func (x *StockQryResp) GetFlowCapital() string {
	if x != nil {
		return x.FlowCapital
	}
	return ""
}

func (x *StockQryResp) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

// 账号信息查询
type AccountInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 子账号
	ChildAccount string `protobuf:"bytes,1,opt,name=childAccount,proto3" json:"childAccount,omitempty"`
	// 总成本
	TotalCost string `protobuf:"bytes,2,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
	// 可用资金
	AvailableFunds string `protobuf:"bytes,3,opt,name=availableFunds,proto3" json:"availableFunds,omitempty"`
	// 子账号
	ChildId string `protobuf:"bytes,4,opt,name=childId,proto3" json:"childId,omitempty"`
	// 余额（A股余额）
	Funds string `protobuf:"bytes,5,opt,name=funds,proto3" json:"funds,omitempty"`
	//总资产
	TotalAssets string `protobuf:"bytes,6,opt,name=totalAssets,proto3" json:"totalAssets,omitempty"`
	//t0 类型  0 t0 ， 1 t1;
	T0Type string `protobuf:"bytes,7,opt,name=t0Type,proto3" json:"t0Type,omitempty"`
	//备注
	Remark string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
	//手续费率模板  只有登录的时候才有这个数据
	CommissionTemplate []*CommissionTemplate `protobuf:"bytes,9,rep,name=commissionTemplate,proto3" json:"commissionTemplate,omitempty"`
	// 港股可用资金
	AvailableFundsHk string `protobuf:"bytes,10,opt,name=availableFundsHk,proto3" json:"availableFundsHk,omitempty"` //待交收金额  ；可用于计算冻结如：冻结=（余额+待交收金额）-（港股股可用）
	DeliveryAmount   string `protobuf:"bytes,11,opt,name=deliveryAmount,proto3" json:"deliveryAmount,omitempty"`
	//true  代表HK有交易权限，FALSE 没有交易权限
	IsOtherTrade bool `protobuf:"varint,12,opt,name=isOtherTrade,proto3" json:"isOtherTrade,omitempty"`
}

func (x *AccountInfoResp) Reset() {
	*x = AccountInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfoResp) ProtoMessage() {}

func (x *AccountInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfoResp.ProtoReflect.Descriptor instead.
func (*AccountInfoResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{8}
}

func (x *AccountInfoResp) GetChildAccount() string {
	if x != nil {
		return x.ChildAccount
	}
	return ""
}

func (x *AccountInfoResp) GetTotalCost() string {
	if x != nil {
		return x.TotalCost
	}
	return ""
}

func (x *AccountInfoResp) GetAvailableFunds() string {
	if x != nil {
		return x.AvailableFunds
	}
	return ""
}

func (x *AccountInfoResp) GetChildId() string {
	if x != nil {
		return x.ChildId
	}
	return ""
}

func (x *AccountInfoResp) GetFunds() string {
	if x != nil {
		return x.Funds
	}
	return ""
}

func (x *AccountInfoResp) GetTotalAssets() string {
	if x != nil {
		return x.TotalAssets
	}
	return ""
}

func (x *AccountInfoResp) GetT0Type() string {
	if x != nil {
		return x.T0Type
	}
	return ""
}

func (x *AccountInfoResp) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AccountInfoResp) GetCommissionTemplate() []*CommissionTemplate {
	if x != nil {
		return x.CommissionTemplate
	}
	return nil
}

func (x *AccountInfoResp) GetAvailableFundsHk() string {
	if x != nil {
		return x.AvailableFundsHk
	}
	return ""
}

func (x *AccountInfoResp) GetDeliveryAmount() string {
	if x != nil {
		return x.DeliveryAmount
	}
	return ""
}

func (x *AccountInfoResp) GetIsOtherTrade() bool {
	if x != nil {
		return x.IsOtherTrade
	}
	return false
}

// 持仓信息查询
type PositionInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 股票代码
	Stocks string `protobuf:"bytes,1,opt,name=stocks,proto3" json:"stocks,omitempty"`
	// 股票名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 总持仓数
	TotalPosition string `protobuf:"bytes,3,opt,name=totalPosition,proto3" json:"totalPosition,omitempty"`
	// 可卖数量
	CanSell string `protobuf:"bytes,4,opt,name=canSell,proto3" json:"canSell,omitempty"`
	// 成本价
	CostPrice string `protobuf:"bytes,5,opt,name=costPrice,proto3" json:"costPrice,omitempty"`
	//上一个开盘交易日收盘价
	ClosePrice          string  `protobuf:"bytes,6,opt,name=closePrice,proto3" json:"closePrice,omitempty"`
	ChildAccount        string  `protobuf:"bytes,7,opt,name=childAccount,proto3" json:"childAccount,omitempty"`                //子账户编号
	ChildId             int32   `protobuf:"varint,8,opt,name=childId,proto3" json:"childId,omitempty"`                         //子账户id
	LastPrice           string  `protobuf:"bytes,9,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`                      //最新价
	Suffix              string  `protobuf:"bytes,10,opt,name=suffix,proto3" json:"suffix,omitempty"`                           //交易所
	CostAmount          float64 `protobuf:"fixed64,11,opt,name=costAmount,proto3" json:"costAmount,omitempty"`                 //成本金额
	InitNumber          int32   `protobuf:"varint,12,opt,name=initNumber,proto3" json:"initNumber,omitempty"`                  //初始股数
	PreTotalProfit      string  `protobuf:"bytes,13,opt,name=preTotalProfit,proto3" json:"preTotalProfit,omitempty"`           //上一日 总盈亏
	FloatCapital        string  `protobuf:"bytes,14,opt,name=floatCapital,proto3" json:"floatCapital,omitempty"`               //用于计算当日盈亏比例的分母
	TodayProfit         string  `protobuf:"bytes,15,opt,name=todayProfit,proto3" json:"todayProfit,omitempty"`                 //当日盈亏
	TodayProfitRate     string  `protobuf:"bytes,16,opt,name=todayProfitRate,proto3" json:"todayProfitRate,omitempty"`         //当日盈亏比例
	StartTotalNumber    int32   `protobuf:"varint,17,opt,name=startTotalNumber,proto3" json:"startTotalNumber,omitempty"`      // 开盘时 昨日剩余数量
	StartBuyTotalAmount string  `protobuf:"bytes,18,opt,name=startBuyTotalAmount,proto3" json:"startBuyTotalAmount,omitempty"` //开盘时 成本金额
	//港币成本
	BuyTotalAmountHk float64 `protobuf:"fixed64,19,opt,name=buyTotalAmountHk,proto3" json:"buyTotalAmountHk,omitempty"`
	//人民币成本
	BuyTotalAmountRmb float64 `protobuf:"fixed64,20,opt,name=buyTotalAmountRmb,proto3" json:"buyTotalAmountRmb,omitempty"`
	//交易市场
	ExchangeType TradeExchangeType `protobuf:"varint,21,opt,name=exchangeType,proto3,enum=tradeStock.TradeExchangeType" json:"exchangeType,omitempty"`
	//交易市场名称
	ExchangeTypeText string `protobuf:"bytes,22,opt,name=exchangeTypeText,proto3" json:"exchangeTypeText,omitempty"`
	//港币成本
	CostPriceHk string `protobuf:"bytes,23,opt,name=costPriceHk,proto3" json:"costPriceHk,omitempty"`
}

func (x *PositionInfoResp) Reset() {
	*x = PositionInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionInfoResp) ProtoMessage() {}

func (x *PositionInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionInfoResp.ProtoReflect.Descriptor instead.
func (*PositionInfoResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{9}
}

func (x *PositionInfoResp) GetStocks() string {
	if x != nil {
		return x.Stocks
	}
	return ""
}

func (x *PositionInfoResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PositionInfoResp) GetTotalPosition() string {
	if x != nil {
		return x.TotalPosition
	}
	return ""
}

func (x *PositionInfoResp) GetCanSell() string {
	if x != nil {
		return x.CanSell
	}
	return ""
}

func (x *PositionInfoResp) GetCostPrice() string {
	if x != nil {
		return x.CostPrice
	}
	return ""
}

func (x *PositionInfoResp) GetClosePrice() string {
	if x != nil {
		return x.ClosePrice
	}
	return ""
}

func (x *PositionInfoResp) GetChildAccount() string {
	if x != nil {
		return x.ChildAccount
	}
	return ""
}

func (x *PositionInfoResp) GetChildId() int32 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

func (x *PositionInfoResp) GetLastPrice() string {
	if x != nil {
		return x.LastPrice
	}
	return ""
}

func (x *PositionInfoResp) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *PositionInfoResp) GetCostAmount() float64 {
	if x != nil {
		return x.CostAmount
	}
	return 0
}

func (x *PositionInfoResp) GetInitNumber() int32 {
	if x != nil {
		return x.InitNumber
	}
	return 0
}

func (x *PositionInfoResp) GetPreTotalProfit() string {
	if x != nil {
		return x.PreTotalProfit
	}
	return ""
}

func (x *PositionInfoResp) GetFloatCapital() string {
	if x != nil {
		return x.FloatCapital
	}
	return ""
}

func (x *PositionInfoResp) GetTodayProfit() string {
	if x != nil {
		return x.TodayProfit
	}
	return ""
}

func (x *PositionInfoResp) GetTodayProfitRate() string {
	if x != nil {
		return x.TodayProfitRate
	}
	return ""
}

func (x *PositionInfoResp) GetStartTotalNumber() int32 {
	if x != nil {
		return x.StartTotalNumber
	}
	return 0
}

func (x *PositionInfoResp) GetStartBuyTotalAmount() string {
	if x != nil {
		return x.StartBuyTotalAmount
	}
	return ""
}

func (x *PositionInfoResp) GetBuyTotalAmountHk() float64 {
	if x != nil {
		return x.BuyTotalAmountHk
	}
	return 0
}

func (x *PositionInfoResp) GetBuyTotalAmountRmb() float64 {
	if x != nil {
		return x.BuyTotalAmountRmb
	}
	return 0
}

func (x *PositionInfoResp) GetExchangeType() TradeExchangeType {
	if x != nil {
		return x.ExchangeType
	}
	return TradeExchangeType_SH
}

func (x *PositionInfoResp) GetExchangeTypeText() string {
	if x != nil {
		return x.ExchangeTypeText
	}
	return ""
}

func (x *PositionInfoResp) GetCostPriceHk() string {
	if x != nil {
		return x.CostPriceHk
	}
	return ""
}

// 委托查询返回信息
type EntrustInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 委托时间
	Time string `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// 委托代码
	EntrustCode string `protobuf:"bytes,2,opt,name=entrustCode,proto3" json:"entrustCode,omitempty"`
	// 代码名称
	StockCode string `protobuf:"bytes,3,opt,name=stockCode,proto3" json:"stockCode,omitempty"`
	// 买卖
	EntrustType EntrustInfoResp_EntrustType `protobuf:"varint,4,opt,name=entrustType,proto3,enum=tradeStock.EntrustInfoResp_EntrustType" json:"entrustType,omitempty"`
	// 委托数量
	EntrustNum string `protobuf:"bytes,5,opt,name=entrustNum,proto3" json:"entrustNum,omitempty"`
	// 成交数量
	DealNum string `protobuf:"bytes,6,opt,name=dealNum,proto3" json:"dealNum,omitempty"`
	// 委托价格
	EntrustPrice string `protobuf:"bytes,7,opt,name=entrustPrice,proto3" json:"entrustPrice,omitempty"`
	// 成交均价
	AverageTransactionPrice string `protobuf:"bytes,8,opt,name=averageTransactionPrice,proto3" json:"averageTransactionPrice,omitempty"`
	// 状态
	Status string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	// 委托编号
	EntrustNo      string `protobuf:"bytes,10,opt,name=entrustNo,proto3" json:"entrustNo,omitempty"`
	LocalOrderCode string `protobuf:"bytes,11,opt,name=localOrderCode,proto3" json:"localOrderCode,omitempty"` // 本地报单编号
	Exchange       string `protobuf:"bytes,12,opt,name=exchange,proto3" json:"exchange,omitempty"`             // 交易所 SH SZ
	DealAmount     string `protobuf:"bytes,13,opt,name=dealAmount,proto3" json:"dealAmount,omitempty"`         // 成交金额
	CanceledNum    string `protobuf:"bytes,14,opt,name=canceledNum,proto3" json:"canceledNum,omitempty"`       //撤单数目
	Cost           string `protobuf:"bytes,15,opt,name=cost,proto3" json:"cost,omitempty"`                     //手续费
	ChildAccount   string `protobuf:"bytes,16,opt,name=childAccount,proto3" json:"childAccount,omitempty"`     //子账户编号
	ChildId        int32  `protobuf:"varint,17,opt,name=childId,proto3" json:"childId,omitempty"`              //子账户id
	//交易市场
	ExchangeType TradeExchangeType `protobuf:"varint,18,opt,name=exchangeType,proto3,enum=tradeStock.TradeExchangeType" json:"exchangeType,omitempty"`
	//a股账户冻结
	FrozenAmount float64 `protobuf:"fixed64,19,opt,name=frozenAmount,proto3" json:"frozenAmount,omitempty"`
	//交易市场名称
	ExchangeTypeText string `protobuf:"bytes,20,opt,name=exchangeTypeText,proto3" json:"exchangeTypeText,omitempty"`
}

func (x *EntrustInfoResp) Reset() {
	*x = EntrustInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrustInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrustInfoResp) ProtoMessage() {}

func (x *EntrustInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrustInfoResp.ProtoReflect.Descriptor instead.
func (*EntrustInfoResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{10}
}

func (x *EntrustInfoResp) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *EntrustInfoResp) GetEntrustCode() string {
	if x != nil {
		return x.EntrustCode
	}
	return ""
}

func (x *EntrustInfoResp) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *EntrustInfoResp) GetEntrustType() EntrustInfoResp_EntrustType {
	if x != nil {
		return x.EntrustType
	}
	return EntrustInfoResp_buy
}

func (x *EntrustInfoResp) GetEntrustNum() string {
	if x != nil {
		return x.EntrustNum
	}
	return ""
}

func (x *EntrustInfoResp) GetDealNum() string {
	if x != nil {
		return x.DealNum
	}
	return ""
}

func (x *EntrustInfoResp) GetEntrustPrice() string {
	if x != nil {
		return x.EntrustPrice
	}
	return ""
}

func (x *EntrustInfoResp) GetAverageTransactionPrice() string {
	if x != nil {
		return x.AverageTransactionPrice
	}
	return ""
}

func (x *EntrustInfoResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EntrustInfoResp) GetEntrustNo() string {
	if x != nil {
		return x.EntrustNo
	}
	return ""
}

func (x *EntrustInfoResp) GetLocalOrderCode() string {
	if x != nil {
		return x.LocalOrderCode
	}
	return ""
}

func (x *EntrustInfoResp) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *EntrustInfoResp) GetDealAmount() string {
	if x != nil {
		return x.DealAmount
	}
	return ""
}

func (x *EntrustInfoResp) GetCanceledNum() string {
	if x != nil {
		return x.CanceledNum
	}
	return ""
}

func (x *EntrustInfoResp) GetCost() string {
	if x != nil {
		return x.Cost
	}
	return ""
}

func (x *EntrustInfoResp) GetChildAccount() string {
	if x != nil {
		return x.ChildAccount
	}
	return ""
}

func (x *EntrustInfoResp) GetChildId() int32 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

func (x *EntrustInfoResp) GetExchangeType() TradeExchangeType {
	if x != nil {
		return x.ExchangeType
	}
	return TradeExchangeType_SH
}

func (x *EntrustInfoResp) GetFrozenAmount() float64 {
	if x != nil {
		return x.FrozenAmount
	}
	return 0
}

func (x *EntrustInfoResp) GetExchangeTypeText() string {
	if x != nil {
		return x.ExchangeTypeText
	}
	return ""
}

// 成交查询
type DealInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time             string                `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`                                                //成交时间
	StockCode        string                `protobuf:"bytes,2,opt,name=stockCode,proto3" json:"stockCode,omitempty"`                                      //代码
	Name             string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                //名称
	DealType         DealInfoResp_DealType `protobuf:"varint,4,opt,name=dealType,proto3,enum=tradeStock.DealInfoResp_DealType" json:"dealType,omitempty"` //买卖
	DealNum          string                `protobuf:"bytes,5,opt,name=dealNum,proto3" json:"dealNum,omitempty"`                                          //成交数量
	AverageDealPrice string                `protobuf:"bytes,6,opt,name=averageDealPrice,proto3" json:"averageDealPrice,omitempty"`                        //成交均价
	Amount           string                `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`                                            //成交金额
	DealCode         string                `protobuf:"bytes,8,opt,name=dealCode,proto3" json:"dealCode,omitempty"`                                        //成交编号
	ChildAccount     string                `protobuf:"bytes,9,opt,name=childAccount,proto3" json:"childAccount,omitempty"`                                //子账户编号
	ChildId          int32                 `protobuf:"varint,10,opt,name=childId,proto3" json:"childId,omitempty"`                                        //子账户id
	EntrustNo        string                `protobuf:"bytes,11,opt,name=entrustNo,proto3" json:"entrustNo,omitempty"`                                     //委托编号
	LocalOrderCode   string                `protobuf:"bytes,12,opt,name=localOrderCode,proto3" json:"localOrderCode,omitempty"`                           //委托单的本地订单号
	Suffix           string                `protobuf:"bytes,13,opt,name=suffix,proto3" json:"suffix,omitempty"`                                           //交易所代码
	//交易市场
	ExchangeType TradeExchangeType `protobuf:"varint,14,opt,name=exchangeType,proto3,enum=tradeStock.TradeExchangeType" json:"exchangeType,omitempty"`
	//人民币 印花税
	StampTaxRmb float64 `protobuf:"fixed64,15,opt,name=stampTaxRmb,proto3" json:"stampTaxRmb,omitempty"`
	//港币 印花税
	StampTaxHk float64 `protobuf:"fixed64,16,opt,name=stampTaxHk,proto3" json:"stampTaxHk,omitempty"`
	//港股交易费 人民币
	TransactionFeeRmb float64 `protobuf:"fixed64,17,opt,name=transactionFeeRmb,proto3" json:"transactionFeeRmb,omitempty"`
	//港股交易费 港币
	TransactionFeeHk float64 `protobuf:"fixed64,18,opt,name=transactionFeeHk,proto3" json:"transactionFeeHk,omitempty"`
	//港股交易系统使用费 人民币
	SystemRoyaltiesRmb float64 `protobuf:"fixed64,19,opt,name=systemRoyaltiesRmb,proto3" json:"systemRoyaltiesRmb,omitempty"`
	//港股交易系统使用费 港币
	SystemRoyaltiesHk float64 `protobuf:"fixed64,20,opt,name=systemRoyaltiesHk,proto3" json:"systemRoyaltiesHk,omitempty"`
	//交易征费  人民币
	TransactionLevyRmb float64 `protobuf:"fixed64,21,opt,name=transactionLevyRmb,proto3" json:"transactionLevyRmb,omitempty"`
	//交易征费  港币
	TransactionLevyHk float64 `protobuf:"fixed64,22,opt,name=transactionLevyHk,proto3" json:"transactionLevyHk,omitempty"`
	//股份交收费 人民币
	SharePaymentFeeRmb float64 `protobuf:"fixed64,23,opt,name=sharePaymentFeeRmb,proto3" json:"sharePaymentFeeRmb,omitempty"`
	//股份交收费 港币
	SharePaymentFeeHk float64 `protobuf:"fixed64,24,opt,name=sharePaymentFeeHk,proto3" json:"sharePaymentFeeHk,omitempty"`
	//财汇局交易征费 人民币
	FinanceTransactionLevyRmb float64 `protobuf:"fixed64,25,opt,name=financeTransactionLevyRmb,proto3" json:"financeTransactionLevyRmb,omitempty"`
	//财汇局交易征费 港币
	FinanceTransactionLevyHk float64 `protobuf:"fixed64,26,opt,name=financeTransactionLevyHk,proto3" json:"financeTransactionLevyHk,omitempty"`
	//投资者赔偿征费 人民币
	CompensationLevyRmb float64 `protobuf:"fixed64,27,opt,name=compensationLevyRmb,proto3" json:"compensationLevyRmb,omitempty"`
	//投资者赔偿征费  港币
	CompensationLevyHk float64 `protobuf:"fixed64,28,opt,name=compensationLevyHk,proto3" json:"compensationLevyHk,omitempty"`
	//投资者赔偿征费  人民币
	SpecialLevyRmb float64 `protobuf:"fixed64,29,opt,name=specialLevyRmb,proto3" json:"specialLevyRmb,omitempty"`
	//投资者赔偿征费  港币
	SpecialLevyHk float64 `protobuf:"fixed64,30,opt,name=specialLevyHk,proto3" json:"specialLevyHk,omitempty"`
	//佣金  人民币
	CommissionRmb float64 `protobuf:"fixed64,31,opt,name=commissionRmb,proto3" json:"commissionRmb,omitempty"`
	//佣金  港币
	CommissionHk float64 `protobuf:"fixed64,32,opt,name=commissionHk,proto3" json:"commissionHk,omitempty"`
	//交易市场名称
	ExchangeTypeText string `protobuf:"bytes,33,opt,name=exchangeTypeText,proto3" json:"exchangeTypeText,omitempty"`
}

func (x *DealInfoResp) Reset() {
	*x = DealInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DealInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DealInfoResp) ProtoMessage() {}

func (x *DealInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DealInfoResp.ProtoReflect.Descriptor instead.
func (*DealInfoResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{11}
}

func (x *DealInfoResp) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *DealInfoResp) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *DealInfoResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DealInfoResp) GetDealType() DealInfoResp_DealType {
	if x != nil {
		return x.DealType
	}
	return DealInfoResp_buy
}

func (x *DealInfoResp) GetDealNum() string {
	if x != nil {
		return x.DealNum
	}
	return ""
}

func (x *DealInfoResp) GetAverageDealPrice() string {
	if x != nil {
		return x.AverageDealPrice
	}
	return ""
}

func (x *DealInfoResp) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DealInfoResp) GetDealCode() string {
	if x != nil {
		return x.DealCode
	}
	return ""
}

func (x *DealInfoResp) GetChildAccount() string {
	if x != nil {
		return x.ChildAccount
	}
	return ""
}

func (x *DealInfoResp) GetChildId() int32 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

func (x *DealInfoResp) GetEntrustNo() string {
	if x != nil {
		return x.EntrustNo
	}
	return ""
}

func (x *DealInfoResp) GetLocalOrderCode() string {
	if x != nil {
		return x.LocalOrderCode
	}
	return ""
}

func (x *DealInfoResp) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *DealInfoResp) GetExchangeType() TradeExchangeType {
	if x != nil {
		return x.ExchangeType
	}
	return TradeExchangeType_SH
}

func (x *DealInfoResp) GetStampTaxRmb() float64 {
	if x != nil {
		return x.StampTaxRmb
	}
	return 0
}

func (x *DealInfoResp) GetStampTaxHk() float64 {
	if x != nil {
		return x.StampTaxHk
	}
	return 0
}

func (x *DealInfoResp) GetTransactionFeeRmb() float64 {
	if x != nil {
		return x.TransactionFeeRmb
	}
	return 0
}

func (x *DealInfoResp) GetTransactionFeeHk() float64 {
	if x != nil {
		return x.TransactionFeeHk
	}
	return 0
}

func (x *DealInfoResp) GetSystemRoyaltiesRmb() float64 {
	if x != nil {
		return x.SystemRoyaltiesRmb
	}
	return 0
}

func (x *DealInfoResp) GetSystemRoyaltiesHk() float64 {
	if x != nil {
		return x.SystemRoyaltiesHk
	}
	return 0
}

func (x *DealInfoResp) GetTransactionLevyRmb() float64 {
	if x != nil {
		return x.TransactionLevyRmb
	}
	return 0
}

func (x *DealInfoResp) GetTransactionLevyHk() float64 {
	if x != nil {
		return x.TransactionLevyHk
	}
	return 0
}

func (x *DealInfoResp) GetSharePaymentFeeRmb() float64 {
	if x != nil {
		return x.SharePaymentFeeRmb
	}
	return 0
}

func (x *DealInfoResp) GetSharePaymentFeeHk() float64 {
	if x != nil {
		return x.SharePaymentFeeHk
	}
	return 0
}

func (x *DealInfoResp) GetFinanceTransactionLevyRmb() float64 {
	if x != nil {
		return x.FinanceTransactionLevyRmb
	}
	return 0
}

func (x *DealInfoResp) GetFinanceTransactionLevyHk() float64 {
	if x != nil {
		return x.FinanceTransactionLevyHk
	}
	return 0
}

func (x *DealInfoResp) GetCompensationLevyRmb() float64 {
	if x != nil {
		return x.CompensationLevyRmb
	}
	return 0
}

func (x *DealInfoResp) GetCompensationLevyHk() float64 {
	if x != nil {
		return x.CompensationLevyHk
	}
	return 0
}

func (x *DealInfoResp) GetSpecialLevyRmb() float64 {
	if x != nil {
		return x.SpecialLevyRmb
	}
	return 0
}

func (x *DealInfoResp) GetSpecialLevyHk() float64 {
	if x != nil {
		return x.SpecialLevyHk
	}
	return 0
}

func (x *DealInfoResp) GetCommissionRmb() float64 {
	if x != nil {
		return x.CommissionRmb
	}
	return 0
}

func (x *DealInfoResp) GetCommissionHk() float64 {
	if x != nil {
		return x.CommissionHk
	}
	return 0
}

func (x *DealInfoResp) GetExchangeTypeText() string {
	if x != nil {
		return x.ExchangeTypeText
	}
	return ""
}

// 对账单查询
type StatementInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time             string                          `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`                                                                    //时间
	Code             string                          `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`                                                                    //代码
	Name             string                          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                    //名称
	StatementType    StatementInfoResp_StatementType `protobuf:"varint,4,opt,name=statementType,proto3,enum=tradeStock.StatementInfoResp_StatementType" json:"statementType,omitempty"` //买卖
	DealNum          string                          `protobuf:"bytes,5,opt,name=dealNum,proto3" json:"dealNum,omitempty"`                                                              //成交数量
	AverageDealPrice string                          `protobuf:"bytes,6,opt,name=averageDealPrice,proto3" json:"averageDealPrice,omitempty"`                                            //成交均价
	Amount           string                          `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`                                                                //成交金额
	ServiceCharge    string                          `protobuf:"bytes,8,opt,name=serviceCharge,proto3" json:"serviceCharge,omitempty"`                                                  //手续费
	Residual         string                          `protobuf:"bytes,9,opt,name=residual,proto3" json:"residual,omitempty"`                                                            //剩余金额
	DealCode         string                          `protobuf:"bytes,10,opt,name=dealCode,proto3" json:"dealCode,omitempty"`                                                           //成交编号
	ChildAccount     string                          `protobuf:"bytes,11,opt,name=childAccount,proto3" json:"childAccount,omitempty"`                                                   //子账户编号
	ChildId          int32                           `protobuf:"varint,12,opt,name=childId,proto3" json:"childId,omitempty"`                                                            //子账户id
}

func (x *StatementInfoResp) Reset() {
	*x = StatementInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatementInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatementInfoResp) ProtoMessage() {}

func (x *StatementInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatementInfoResp.ProtoReflect.Descriptor instead.
func (*StatementInfoResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{12}
}

func (x *StatementInfoResp) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *StatementInfoResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StatementInfoResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatementInfoResp) GetStatementType() StatementInfoResp_StatementType {
	if x != nil {
		return x.StatementType
	}
	return StatementInfoResp_buy
}

func (x *StatementInfoResp) GetDealNum() string {
	if x != nil {
		return x.DealNum
	}
	return ""
}

func (x *StatementInfoResp) GetAverageDealPrice() string {
	if x != nil {
		return x.AverageDealPrice
	}
	return ""
}

func (x *StatementInfoResp) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *StatementInfoResp) GetServiceCharge() string {
	if x != nil {
		return x.ServiceCharge
	}
	return ""
}

func (x *StatementInfoResp) GetResidual() string {
	if x != nil {
		return x.Residual
	}
	return ""
}

func (x *StatementInfoResp) GetDealCode() string {
	if x != nil {
		return x.DealCode
	}
	return ""
}

func (x *StatementInfoResp) GetChildAccount() string {
	if x != nil {
		return x.ChildAccount
	}
	return ""
}

func (x *StatementInfoResp) GetChildId() int32 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

// 下单请求
type OrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockCode        string             `protobuf:"bytes,1,opt,name=stockCode,proto3" json:"stockCode,omitempty"`                                     //股票代码
	Num              string             `protobuf:"bytes,2,opt,name=num,proto3" json:"num,omitempty"`                                                 //数目
	Price            string             `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`                                             //价格
	OrderType        OrderReq_OrderType `protobuf:"varint,4,opt,name=orderType,proto3,enum=tradeStock.OrderReq_OrderType" json:"orderType,omitempty"` //买卖类型
	LocalOrderCode   string             `protobuf:"bytes,5,opt,name=localOrderCode,proto3" json:"localOrderCode,omitempty"`                           //本地订单号 唯一
	Exchange         string             `protobuf:"bytes,6,opt,name=exchange,proto3" json:"exchange,omitempty"`                                       //交易所 上交所  SH，深交所  SZ
	PassiveOrderInfo *PassiveOrderInfo  `protobuf:"bytes,7,opt,name=passiveOrderInfo,proto3" json:"passiveOrderInfo,omitempty"`                       //不用写
	OrderSource      string             `protobuf:"bytes,8,opt,name=orderSource,proto3" json:"orderSource,omitempty"`
	SourceId         string             `protobuf:"bytes,9,opt,name=sourceId,proto3" json:"sourceId,omitempty"`
	//交易市场
	ExchangeType string      `protobuf:"bytes,10,opt,name=exchangeType,proto3" json:"exchangeType,omitempty"`
	HkPriceType  HkPriceType `protobuf:"varint,11,opt,name=hkPriceType,proto3,enum=tradeStock.HkPriceType" json:"hkPriceType,omitempty"`
}

func (x *OrderReq) Reset() {
	*x = OrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReq) ProtoMessage() {}

func (x *OrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReq.ProtoReflect.Descriptor instead.
func (*OrderReq) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{13}
}

func (x *OrderReq) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *OrderReq) GetNum() string {
	if x != nil {
		return x.Num
	}
	return ""
}

func (x *OrderReq) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *OrderReq) GetOrderType() OrderReq_OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderReq_buy
}

func (x *OrderReq) GetLocalOrderCode() string {
	if x != nil {
		return x.LocalOrderCode
	}
	return ""
}

func (x *OrderReq) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *OrderReq) GetPassiveOrderInfo() *PassiveOrderInfo {
	if x != nil {
		return x.PassiveOrderInfo
	}
	return nil
}

func (x *OrderReq) GetOrderSource() string {
	if x != nil {
		return x.OrderSource
	}
	return ""
}

func (x *OrderReq) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *OrderReq) GetExchangeType() string {
	if x != nil {
		return x.ExchangeType
	}
	return ""
}

func (x *OrderReq) GetHkPriceType() HkPriceType {
	if x != nil {
		return x.HkPriceType
	}
	return HkPriceType_enhance_price
}

//被动式下单 一些信息
type PassiveOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayStopLoss     string                     `protobuf:"bytes,1,opt,name=dayStopLoss,proto3" json:"dayStopLoss,omitempty"`
	TotalStopLoss   string                     `protobuf:"bytes,2,opt,name=totalStopLoss,proto3" json:"totalStopLoss,omitempty"`
	DayStopProfit   string                     `protobuf:"bytes,3,opt,name=dayStopProfit,proto3" json:"dayStopProfit,omitempty"`
	TotalStopProfit string                     `protobuf:"bytes,4,opt,name=totalStopProfit,proto3" json:"totalStopProfit,omitempty"`
	ClosePositionId string                     `protobuf:"bytes,5,opt,name=closePositionId,proto3" json:"closePositionId,omitempty"`
	RunNumber       string                     `protobuf:"bytes,6,opt,name=runNumber,proto3" json:"runNumber,omitempty"`
	Amount          string                     `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	OrderTime       string                     `protobuf:"bytes,8,opt,name=orderTime,proto3" json:"orderTime,omitempty"`
	TaskTimeNumber  string                     `protobuf:"bytes,9,opt,name=taskTimeNumber,proto3" json:"taskTimeNumber,omitempty"`
	Proportion      string                     `protobuf:"bytes,10,opt,name=proportion,proto3" json:"proportion,omitempty"`
	TaskTime        string                     `protobuf:"bytes,11,opt,name=taskTime,proto3" json:"taskTime,omitempty"`
	OrderFlag       PassiveOrderInfo_OrderFlag `protobuf:"varint,12,opt,name=orderFlag,proto3,enum=tradeStock.PassiveOrderInfo_OrderFlag" json:"orderFlag,omitempty"`
}

func (x *PassiveOrderInfo) Reset() {
	*x = PassiveOrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassiveOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassiveOrderInfo) ProtoMessage() {}

func (x *PassiveOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassiveOrderInfo.ProtoReflect.Descriptor instead.
func (*PassiveOrderInfo) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{14}
}

func (x *PassiveOrderInfo) GetDayStopLoss() string {
	if x != nil {
		return x.DayStopLoss
	}
	return ""
}

func (x *PassiveOrderInfo) GetTotalStopLoss() string {
	if x != nil {
		return x.TotalStopLoss
	}
	return ""
}

func (x *PassiveOrderInfo) GetDayStopProfit() string {
	if x != nil {
		return x.DayStopProfit
	}
	return ""
}

func (x *PassiveOrderInfo) GetTotalStopProfit() string {
	if x != nil {
		return x.TotalStopProfit
	}
	return ""
}

func (x *PassiveOrderInfo) GetClosePositionId() string {
	if x != nil {
		return x.ClosePositionId
	}
	return ""
}

func (x *PassiveOrderInfo) GetRunNumber() string {
	if x != nil {
		return x.RunNumber
	}
	return ""
}

func (x *PassiveOrderInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PassiveOrderInfo) GetOrderTime() string {
	if x != nil {
		return x.OrderTime
	}
	return ""
}

func (x *PassiveOrderInfo) GetTaskTimeNumber() string {
	if x != nil {
		return x.TaskTimeNumber
	}
	return ""
}

func (x *PassiveOrderInfo) GetProportion() string {
	if x != nil {
		return x.Proportion
	}
	return ""
}

func (x *PassiveOrderInfo) GetTaskTime() string {
	if x != nil {
		return x.TaskTime
	}
	return ""
}

func (x *PassiveOrderInfo) GetOrderFlag() PassiveOrderInfo_OrderFlag {
	if x != nil {
		return x.OrderFlag
	}
	return PassiveOrderInfo_undefined
}

// 下单请求返回
type OrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRespType    OrderResp_OrderRespType `protobuf:"varint,1,opt,name=orderRespType,proto3,enum=tradeStock.OrderResp_OrderRespType" json:"orderRespType,omitempty"`
	LocalOrderCode   string                  `protobuf:"bytes,2,opt,name=localOrderCode,proto3" json:"localOrderCode,omitempty"` //本地订单号
	Message          string                  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`               //错误信息
	EntrustBasicInfo *EntrustBasicInfo       `protobuf:"bytes,4,opt,name=entrustBasicInfo,proto3" json:"entrustBasicInfo,omitempty"`
}

func (x *OrderResp) Reset() {
	*x = OrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResp) ProtoMessage() {}

func (x *OrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResp.ProtoReflect.Descriptor instead.
func (*OrderResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{15}
}

func (x *OrderResp) GetOrderRespType() OrderResp_OrderRespType {
	if x != nil {
		return x.OrderRespType
	}
	return OrderResp_success
}

func (x *OrderResp) GetLocalOrderCode() string {
	if x != nil {
		return x.LocalOrderCode
	}
	return ""
}

func (x *OrderResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OrderResp) GetEntrustBasicInfo() *EntrustBasicInfo {
	if x != nil {
		return x.EntrustBasicInfo
	}
	return nil
}

//下单确认
type OrderConfirmResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRespType    OrderResp_OrderRespType `protobuf:"varint,1,opt,name=orderRespType,proto3,enum=tradeStock.OrderResp_OrderRespType" json:"orderRespType,omitempty"`
	EntrustBasicInfo *EntrustBasicInfo       `protobuf:"bytes,2,opt,name=entrustBasicInfo,proto3" json:"entrustBasicInfo,omitempty"`
}

func (x *OrderConfirmResp) Reset() {
	*x = OrderConfirmResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderConfirmResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderConfirmResp) ProtoMessage() {}

func (x *OrderConfirmResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderConfirmResp.ProtoReflect.Descriptor instead.
func (*OrderConfirmResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{16}
}

func (x *OrderConfirmResp) GetOrderRespType() OrderResp_OrderRespType {
	if x != nil {
		return x.OrderRespType
	}
	return OrderResp_success
}

func (x *OrderConfirmResp) GetEntrustBasicInfo() *EntrustBasicInfo {
	if x != nil {
		return x.EntrustBasicInfo
	}
	return nil
}

// 撤单
type CancelOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalOrderCode   string                          `protobuf:"bytes,1,opt,name=localOrderCode,proto3" json:"localOrderCode,omitempty"`
	CancelOrderType  CancelOrderResp_CancelOrderType `protobuf:"varint,2,opt,name=cancelOrderType,proto3,enum=tradeStock.CancelOrderResp_CancelOrderType" json:"cancelOrderType,omitempty"`
	EntrustBasicInfo *EntrustBasicInfo               `protobuf:"bytes,3,opt,name=entrustBasicInfo,proto3" json:"entrustBasicInfo,omitempty"`
}

func (x *CancelOrderResp) Reset() {
	*x = CancelOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderResp) ProtoMessage() {}

func (x *CancelOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderResp.ProtoReflect.Descriptor instead.
func (*CancelOrderResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{17}
}

func (x *CancelOrderResp) GetLocalOrderCode() string {
	if x != nil {
		return x.LocalOrderCode
	}
	return ""
}

func (x *CancelOrderResp) GetCancelOrderType() CancelOrderResp_CancelOrderType {
	if x != nil {
		return x.CancelOrderType
	}
	return CancelOrderResp_success
}

func (x *CancelOrderResp) GetEntrustBasicInfo() *EntrustBasicInfo {
	if x != nil {
		return x.EntrustBasicInfo
	}
	return nil
}

//撤单确认
type CancelOrderConfirmResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRespType    OrderResp_OrderRespType `protobuf:"varint,1,opt,name=orderRespType,proto3,enum=tradeStock.OrderResp_OrderRespType" json:"orderRespType,omitempty"`
	EntrustBasicInfo *EntrustBasicInfo       `protobuf:"bytes,2,opt,name=entrustBasicInfo,proto3" json:"entrustBasicInfo,omitempty"`
}

func (x *CancelOrderConfirmResp) Reset() {
	*x = CancelOrderConfirmResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderConfirmResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderConfirmResp) ProtoMessage() {}

func (x *CancelOrderConfirmResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderConfirmResp.ProtoReflect.Descriptor instead.
func (*CancelOrderConfirmResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{18}
}

func (x *CancelOrderConfirmResp) GetOrderRespType() OrderResp_OrderRespType {
	if x != nil {
		return x.OrderRespType
	}
	return OrderResp_success
}

func (x *CancelOrderConfirmResp) GetEntrustBasicInfo() *EntrustBasicInfo {
	if x != nil {
		return x.EntrustBasicInfo
	}
	return nil
}

type EntrustBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange string `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"` // 交易所 SH SZ
	// 代码名称
	StockCode string `protobuf:"bytes,2,opt,name=stockCode,proto3" json:"stockCode,omitempty"`
	// 买卖
	EntrustType EntrustBasicInfo_EntrustType `protobuf:"varint,3,opt,name=entrustType,proto3,enum=tradeStock.EntrustBasicInfo_EntrustType" json:"entrustType,omitempty"`
	// 委托数量
	EntrustNum string `protobuf:"bytes,4,opt,name=entrustNum,proto3" json:"entrustNum,omitempty"`
	// 委托价格
	EntrustPrice string `protobuf:"bytes,5,opt,name=entrustPrice,proto3" json:"entrustPrice,omitempty"`
	// 本地报单编号
	LocalOrderCode string `protobuf:"bytes,6,opt,name=localOrderCode,proto3" json:"localOrderCode,omitempty"`
	// 委托时间
	Time string `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
	// 状态
	Status string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// 撤单时间时间
	CancelTime string `protobuf:"bytes,9,opt,name=cancelTime,proto3" json:"cancelTime,omitempty"`
	//已撤单数目
	CanceledNum string `protobuf:"bytes,10,opt,name=canceledNum,proto3" json:"canceledNum,omitempty"`
	//成交数目
	DealNum string `protobuf:"bytes,11,opt,name=dealNum,proto3" json:"dealNum,omitempty"`
	//成交金额
	DealAmount string `protobuf:"bytes,12,opt,name=dealAmount,proto3" json:"dealAmount,omitempty"`
	//累计交易费用
	Cost string `protobuf:"bytes,13,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *EntrustBasicInfo) Reset() {
	*x = EntrustBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrustBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrustBasicInfo) ProtoMessage() {}

func (x *EntrustBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrustBasicInfo.ProtoReflect.Descriptor instead.
func (*EntrustBasicInfo) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{19}
}

func (x *EntrustBasicInfo) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *EntrustBasicInfo) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *EntrustBasicInfo) GetEntrustType() EntrustBasicInfo_EntrustType {
	if x != nil {
		return x.EntrustType
	}
	return EntrustBasicInfo_buy
}

func (x *EntrustBasicInfo) GetEntrustNum() string {
	if x != nil {
		return x.EntrustNum
	}
	return ""
}

func (x *EntrustBasicInfo) GetEntrustPrice() string {
	if x != nil {
		return x.EntrustPrice
	}
	return ""
}

func (x *EntrustBasicInfo) GetLocalOrderCode() string {
	if x != nil {
		return x.LocalOrderCode
	}
	return ""
}

func (x *EntrustBasicInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *EntrustBasicInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EntrustBasicInfo) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *EntrustBasicInfo) GetCanceledNum() string {
	if x != nil {
		return x.CanceledNum
	}
	return ""
}

func (x *EntrustBasicInfo) GetDealNum() string {
	if x != nil {
		return x.DealNum
	}
	return ""
}

func (x *EntrustBasicInfo) GetDealAmount() string {
	if x != nil {
		return x.DealAmount
	}
	return ""
}

func (x *EntrustBasicInfo) GetCost() string {
	if x != nil {
		return x.Cost
	}
	return ""
}

//成交回报
type DealResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange         string             `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`                                       // 交易所 SH SZ
	OrderType        DealResp_OrderType `protobuf:"varint,2,opt,name=orderType,proto3,enum=tradeStock.DealResp_OrderType" json:"orderType,omitempty"` // 买卖类型
	StockCode        string             `protobuf:"bytes,3,opt,name=stockCode,proto3" json:"stockCode,omitempty"`                                     //证券代码
	TrdDate          string             `protobuf:"bytes,4,opt,name=trdDate,proto3" json:"trdDate,omitempty"`                                         //交易日期
	TrdTime          string             `protobuf:"bytes,5,opt,name=trdTime,proto3" json:"trdTime,omitempty"`                                         //交易时间
	DealNum          string             `protobuf:"bytes,6,opt,name=dealNum,proto3" json:"dealNum,omitempty"`                                         //成交数量
	DealPrice        string             `protobuf:"bytes,7,opt,name=dealPrice,proto3" json:"dealPrice,omitempty"`                                     //成交价格
	DealAmount       string             `protobuf:"bytes,8,opt,name=dealAmount,proto3" json:"dealAmount,omitempty"`                                   //成交金额
	TotalDealNum     string             `protobuf:"bytes,9,opt,name=totalDealNum,proto3" json:"totalDealNum,omitempty"`                               //累计成交数量
	TotalDealAmount  string             `protobuf:"bytes,10,opt,name=totalDealAmount,proto3" json:"totalDealAmount,omitempty"`                        //累计成交金额
	AverageDealPrice string             `protobuf:"bytes,11,opt,name=averageDealPrice,proto3" json:"averageDealPrice,omitempty"`                      //成交均价
	TotalCost        string             `protobuf:"bytes,12,opt,name=totalCost,proto3" json:"totalCost,omitempty"`                                    //累计交易费用
	DealNo           string             `protobuf:"bytes,13,opt,name=dealNo,proto3" json:"dealNo,omitempty"`                                          //成交编号
	Status           string             `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`                                          //委托单的状态  同 EntrustBasicInfo 的状态
	LocalOrderCode   string             `protobuf:"bytes,15,opt,name=localOrderCode,proto3" json:"localOrderCode,omitempty"`                          //委托单的本地订单号
	EntrustNo        string             `protobuf:"bytes,16,opt,name=entrustNo,proto3" json:"entrustNo,omitempty"`                                    //委托单编号
	Name             string             `protobuf:"bytes,17,opt,name=name,proto3" json:"name,omitempty"`                                              //股票代码
	//交易市场
	ExchangeType TradeExchangeType `protobuf:"varint,18,opt,name=exchangeType,proto3,enum=tradeStock.TradeExchangeType" json:"exchangeType,omitempty"`
	//人民币 印花税
	StampTaxRmb float64 `protobuf:"fixed64,19,opt,name=stampTaxRmb,proto3" json:"stampTaxRmb,omitempty"`
	//港币 印花税
	StampTaxHk float64 `protobuf:"fixed64,20,opt,name=stampTaxHk,proto3" json:"stampTaxHk,omitempty"`
	//港股交易费 人民币
	TransactionFeeRmb float64 `protobuf:"fixed64,21,opt,name=transactionFeeRmb,proto3" json:"transactionFeeRmb,omitempty"`
	//港股交易费 港币
	TransactionFeeHk float64 `protobuf:"fixed64,22,opt,name=transactionFeeHk,proto3" json:"transactionFeeHk,omitempty"`
	//港股交易系统使用费 人民币
	SystemRoyaltiesRmb float64 `protobuf:"fixed64,23,opt,name=systemRoyaltiesRmb,proto3" json:"systemRoyaltiesRmb,omitempty"`
	//港股交易系统使用费 港币
	SystemRoyaltiesHk float64 `protobuf:"fixed64,24,opt,name=systemRoyaltiesHk,proto3" json:"systemRoyaltiesHk,omitempty"`
	//交易征费  人民币
	TransactionLevyRmb float64 `protobuf:"fixed64,25,opt,name=transactionLevyRmb,proto3" json:"transactionLevyRmb,omitempty"`
	//交易征费  港币
	TransactionLevyHk float64 `protobuf:"fixed64,26,opt,name=transactionLevyHk,proto3" json:"transactionLevyHk,omitempty"`
	//股份交收费 人民币
	SharePaymentFeeRmb float64 `protobuf:"fixed64,27,opt,name=sharePaymentFeeRmb,proto3" json:"sharePaymentFeeRmb,omitempty"`
	//股份交收费 港币
	SharePaymentFeeHk float64 `protobuf:"fixed64,28,opt,name=sharePaymentFeeHk,proto3" json:"sharePaymentFeeHk,omitempty"`
	//财汇局交易征费 人民币
	FinanceTransactionLevyRmb float64 `protobuf:"fixed64,29,opt,name=financeTransactionLevyRmb,proto3" json:"financeTransactionLevyRmb,omitempty"`
	//财汇局交易征费 港币
	FinanceTransactionLevyHk float64 `protobuf:"fixed64,30,opt,name=financeTransactionLevyHk,proto3" json:"financeTransactionLevyHk,omitempty"`
	//投资者赔偿征费 人民币
	CompensationLevyRmb float64 `protobuf:"fixed64,31,opt,name=compensationLevyRmb,proto3" json:"compensationLevyRmb,omitempty"`
	//投资者赔偿征费  港币
	CompensationLevyHk float64 `protobuf:"fixed64,32,opt,name=compensationLevyHk,proto3" json:"compensationLevyHk,omitempty"`
	//投资者赔偿征费  人民币
	SpecialLevyRmb float64 `protobuf:"fixed64,33,opt,name=specialLevyRmb,proto3" json:"specialLevyRmb,omitempty"`
	//投资者赔偿征费  港币
	SpecialLevyHk float64 `protobuf:"fixed64,34,opt,name=specialLevyHk,proto3" json:"specialLevyHk,omitempty"`
	//佣金  人民币
	CommissionRmb float64 `protobuf:"fixed64,35,opt,name=commissionRmb,proto3" json:"commissionRmb,omitempty"`
	//佣金  港币
	CommissionHk float64 `protobuf:"fixed64,36,opt,name=commissionHk,proto3" json:"commissionHk,omitempty"`
	//交易市场名称
	ExchangeTypeText string `protobuf:"bytes,37,opt,name=exchangeTypeText,proto3" json:"exchangeTypeText,omitempty"`
}

func (x *DealResp) Reset() {
	*x = DealResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DealResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DealResp) ProtoMessage() {}

func (x *DealResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DealResp.ProtoReflect.Descriptor instead.
func (*DealResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{20}
}

func (x *DealResp) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *DealResp) GetOrderType() DealResp_OrderType {
	if x != nil {
		return x.OrderType
	}
	return DealResp_buy
}

func (x *DealResp) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *DealResp) GetTrdDate() string {
	if x != nil {
		return x.TrdDate
	}
	return ""
}

func (x *DealResp) GetTrdTime() string {
	if x != nil {
		return x.TrdTime
	}
	return ""
}

func (x *DealResp) GetDealNum() string {
	if x != nil {
		return x.DealNum
	}
	return ""
}

func (x *DealResp) GetDealPrice() string {
	if x != nil {
		return x.DealPrice
	}
	return ""
}

func (x *DealResp) GetDealAmount() string {
	if x != nil {
		return x.DealAmount
	}
	return ""
}

func (x *DealResp) GetTotalDealNum() string {
	if x != nil {
		return x.TotalDealNum
	}
	return ""
}

func (x *DealResp) GetTotalDealAmount() string {
	if x != nil {
		return x.TotalDealAmount
	}
	return ""
}

func (x *DealResp) GetAverageDealPrice() string {
	if x != nil {
		return x.AverageDealPrice
	}
	return ""
}

func (x *DealResp) GetTotalCost() string {
	if x != nil {
		return x.TotalCost
	}
	return ""
}

func (x *DealResp) GetDealNo() string {
	if x != nil {
		return x.DealNo
	}
	return ""
}

func (x *DealResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DealResp) GetLocalOrderCode() string {
	if x != nil {
		return x.LocalOrderCode
	}
	return ""
}

func (x *DealResp) GetEntrustNo() string {
	if x != nil {
		return x.EntrustNo
	}
	return ""
}

func (x *DealResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DealResp) GetExchangeType() TradeExchangeType {
	if x != nil {
		return x.ExchangeType
	}
	return TradeExchangeType_SH
}

func (x *DealResp) GetStampTaxRmb() float64 {
	if x != nil {
		return x.StampTaxRmb
	}
	return 0
}

func (x *DealResp) GetStampTaxHk() float64 {
	if x != nil {
		return x.StampTaxHk
	}
	return 0
}

func (x *DealResp) GetTransactionFeeRmb() float64 {
	if x != nil {
		return x.TransactionFeeRmb
	}
	return 0
}

func (x *DealResp) GetTransactionFeeHk() float64 {
	if x != nil {
		return x.TransactionFeeHk
	}
	return 0
}

func (x *DealResp) GetSystemRoyaltiesRmb() float64 {
	if x != nil {
		return x.SystemRoyaltiesRmb
	}
	return 0
}

func (x *DealResp) GetSystemRoyaltiesHk() float64 {
	if x != nil {
		return x.SystemRoyaltiesHk
	}
	return 0
}

func (x *DealResp) GetTransactionLevyRmb() float64 {
	if x != nil {
		return x.TransactionLevyRmb
	}
	return 0
}

func (x *DealResp) GetTransactionLevyHk() float64 {
	if x != nil {
		return x.TransactionLevyHk
	}
	return 0
}

func (x *DealResp) GetSharePaymentFeeRmb() float64 {
	if x != nil {
		return x.SharePaymentFeeRmb
	}
	return 0
}

func (x *DealResp) GetSharePaymentFeeHk() float64 {
	if x != nil {
		return x.SharePaymentFeeHk
	}
	return 0
}

func (x *DealResp) GetFinanceTransactionLevyRmb() float64 {
	if x != nil {
		return x.FinanceTransactionLevyRmb
	}
	return 0
}

func (x *DealResp) GetFinanceTransactionLevyHk() float64 {
	if x != nil {
		return x.FinanceTransactionLevyHk
	}
	return 0
}

func (x *DealResp) GetCompensationLevyRmb() float64 {
	if x != nil {
		return x.CompensationLevyRmb
	}
	return 0
}

func (x *DealResp) GetCompensationLevyHk() float64 {
	if x != nil {
		return x.CompensationLevyHk
	}
	return 0
}

func (x *DealResp) GetSpecialLevyRmb() float64 {
	if x != nil {
		return x.SpecialLevyRmb
	}
	return 0
}

func (x *DealResp) GetSpecialLevyHk() float64 {
	if x != nil {
		return x.SpecialLevyHk
	}
	return 0
}

func (x *DealResp) GetCommissionRmb() float64 {
	if x != nil {
		return x.CommissionRmb
	}
	return 0
}

func (x *DealResp) GetCommissionHk() float64 {
	if x != nil {
		return x.CommissionHk
	}
	return 0
}

func (x *DealResp) GetExchangeTypeText() string {
	if x != nil {
		return x.ExchangeTypeText
	}
	return ""
}

type T0PositionStatisticsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionInfo        []*T0PositionInfoResp `protobuf:"bytes,1,rep,name=positionInfo,proto3" json:"positionInfo,omitempty"`                 //持仓信息
	TotalPositionValue  float64               `protobuf:"fixed64,2,opt,name=totalPositionValue,proto3" json:"totalPositionValue,omitempty"`   //持仓市值
	TotalPositionProfit float64               `protobuf:"fixed64,3,opt,name=totalPositionProfit,proto3" json:"totalPositionProfit,omitempty"` //持仓盈亏
	T0Profit            float64               `protobuf:"fixed64,4,opt,name=t0Profit,proto3" json:"t0Profit,omitempty"`                       //t0 盈亏
}

func (x *T0PositionStatisticsResp) Reset() {
	*x = T0PositionStatisticsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *T0PositionStatisticsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*T0PositionStatisticsResp) ProtoMessage() {}

func (x *T0PositionStatisticsResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use T0PositionStatisticsResp.ProtoReflect.Descriptor instead.
func (*T0PositionStatisticsResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{21}
}

func (x *T0PositionStatisticsResp) GetPositionInfo() []*T0PositionInfoResp {
	if x != nil {
		return x.PositionInfo
	}
	return nil
}

func (x *T0PositionStatisticsResp) GetTotalPositionValue() float64 {
	if x != nil {
		return x.TotalPositionValue
	}
	return 0
}

func (x *T0PositionStatisticsResp) GetTotalPositionProfit() float64 {
	if x != nil {
		return x.TotalPositionProfit
	}
	return 0
}

func (x *T0PositionStatisticsResp) GetT0Profit() float64 {
	if x != nil {
		return x.T0Profit
	}
	return 0
}

// 持仓信息查询
type T0PositionInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 股票代码
	Stocks string `protobuf:"bytes,1,opt,name=stocks,proto3" json:"stocks,omitempty"`
	// 股票名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 总持仓数
	TotalPosition int32 `protobuf:"varint,3,opt,name=totalPosition,proto3" json:"totalPosition,omitempty"`
	// 可卖数量
	CanSell int32 `protobuf:"varint,4,opt,name=canSell,proto3" json:"canSell,omitempty"`
	// 成本价
	CostPrice float64 `protobuf:"fixed64,5,opt,name=costPrice,proto3" json:"costPrice,omitempty"`
	//上一个开盘交易日收盘价
	ClosePrice      float64 `protobuf:"fixed64,6,opt,name=closePrice,proto3" json:"closePrice,omitempty"`
	ChildAccount    string  `protobuf:"bytes,7,opt,name=childAccount,proto3" json:"childAccount,omitempty"`         //子账户编号
	ChildId         int32   `protobuf:"varint,8,opt,name=childId,proto3" json:"childId,omitempty"`                  //子账户id
	TotalDealAmount float64 `protobuf:"fixed64,9,opt,name=totalDealAmount,proto3" json:"totalDealAmount,omitempty"` //总成交金额
	T0ProfitRate    float64 `protobuf:"fixed64,10,opt,name=t0profitRate,proto3" json:"t0profitRate,omitempty"`      // t0浮盈比例
	T0Profit        float64 `protobuf:"fixed64,11,opt,name=t0profit,proto3" json:"t0profit,omitempty"`              //t0 盈亏
	InitPrice       float64 `protobuf:"fixed64,12,opt,name=initPrice,proto3" json:"initPrice,omitempty"`            //t0 初始价格
	LastPrice       float64 `protobuf:"fixed64,13,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`            //当前价
	Suffix          string  `protobuf:"bytes,14,opt,name=suffix,proto3" json:"suffix,omitempty"`
	CostAmount      float64 `protobuf:"fixed64,15,opt,name=costAmount,proto3" json:"costAmount,omitempty"` //成本金额
	InitNumber      int32   `protobuf:"varint,16,opt,name=initNumber,proto3" json:"initNumber,omitempty"`  //初始股数
}

func (x *T0PositionInfoResp) Reset() {
	*x = T0PositionInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *T0PositionInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*T0PositionInfoResp) ProtoMessage() {}

func (x *T0PositionInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use T0PositionInfoResp.ProtoReflect.Descriptor instead.
func (*T0PositionInfoResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{22}
}

func (x *T0PositionInfoResp) GetStocks() string {
	if x != nil {
		return x.Stocks
	}
	return ""
}

func (x *T0PositionInfoResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *T0PositionInfoResp) GetTotalPosition() int32 {
	if x != nil {
		return x.TotalPosition
	}
	return 0
}

func (x *T0PositionInfoResp) GetCanSell() int32 {
	if x != nil {
		return x.CanSell
	}
	return 0
}

func (x *T0PositionInfoResp) GetCostPrice() float64 {
	if x != nil {
		return x.CostPrice
	}
	return 0
}

func (x *T0PositionInfoResp) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *T0PositionInfoResp) GetChildAccount() string {
	if x != nil {
		return x.ChildAccount
	}
	return ""
}

func (x *T0PositionInfoResp) GetChildId() int32 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

func (x *T0PositionInfoResp) GetTotalDealAmount() float64 {
	if x != nil {
		return x.TotalDealAmount
	}
	return 0
}

func (x *T0PositionInfoResp) GetT0ProfitRate() float64 {
	if x != nil {
		return x.T0ProfitRate
	}
	return 0
}

func (x *T0PositionInfoResp) GetT0Profit() float64 {
	if x != nil {
		return x.T0Profit
	}
	return 0
}

func (x *T0PositionInfoResp) GetInitPrice() float64 {
	if x != nil {
		return x.InitPrice
	}
	return 0
}

func (x *T0PositionInfoResp) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *T0PositionInfoResp) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *T0PositionInfoResp) GetCostAmount() float64 {
	if x != nil {
		return x.CostAmount
	}
	return 0
}

func (x *T0PositionInfoResp) GetInitNumber() int32 {
	if x != nil {
		return x.InitNumber
	}
	return 0
}

type T0UsablePositionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 股票代码
	Stocks string `protobuf:"bytes,1,opt,name=stocks,proto3" json:"stocks,omitempty"`
	// 股票名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 总持仓数
	TotalPosition int32 `protobuf:"varint,3,opt,name=totalPosition,proto3" json:"totalPosition,omitempty"`
	// 可卖数量
	CanSell      int32  `protobuf:"varint,4,opt,name=canSell,proto3" json:"canSell,omitempty"`
	CanBuy       int32  `protobuf:"varint,5,opt,name=canBuy,proto3" json:"canBuy,omitempty"`            //可买数目
	ChildAccount string `protobuf:"bytes,6,opt,name=childAccount,proto3" json:"childAccount,omitempty"` //子账户编号
	ChildId      int32  `protobuf:"varint,7,opt,name=childId,proto3" json:"childId,omitempty"`          //子账户id
	Suffix       string `protobuf:"bytes,8,opt,name=suffix,proto3" json:"suffix,omitempty"`             //上交所 SH , 深交所 SZ
}

func (x *T0UsablePositionResp) Reset() {
	*x = T0UsablePositionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *T0UsablePositionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*T0UsablePositionResp) ProtoMessage() {}

func (x *T0UsablePositionResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use T0UsablePositionResp.ProtoReflect.Descriptor instead.
func (*T0UsablePositionResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{23}
}

func (x *T0UsablePositionResp) GetStocks() string {
	if x != nil {
		return x.Stocks
	}
	return ""
}

func (x *T0UsablePositionResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *T0UsablePositionResp) GetTotalPosition() int32 {
	if x != nil {
		return x.TotalPosition
	}
	return 0
}

func (x *T0UsablePositionResp) GetCanSell() int32 {
	if x != nil {
		return x.CanSell
	}
	return 0
}

func (x *T0UsablePositionResp) GetCanBuy() int32 {
	if x != nil {
		return x.CanBuy
	}
	return 0
}

func (x *T0UsablePositionResp) GetChildAccount() string {
	if x != nil {
		return x.ChildAccount
	}
	return ""
}

func (x *T0UsablePositionResp) GetChildId() int32 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

func (x *T0UsablePositionResp) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

type T0ProfitStatisticsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionProfitResp []*T0PositionProfitStatisticsResp `protobuf:"bytes,1,rep,name=positionProfitResp,proto3" json:"positionProfitResp,omitempty"` //持仓盈亏统计
	TotalDealAmount    float64                           `protobuf:"fixed64,2,opt,name=totalDealAmount,proto3" json:"totalDealAmount,omitempty"`     //总交易额
	T0TotalProfit      float64                           `protobuf:"fixed64,3,opt,name=t0TotalProfit,proto3" json:"t0TotalProfit,omitempty"`         //t0 总盈亏
	TodayDealAmount    float64                           `protobuf:"fixed64,4,opt,name=todayDealAmount,proto3" json:"todayDealAmount,omitempty"`     //当日总交易额
	T0TodayProfit      float64                           `protobuf:"fixed64,5,opt,name=t0TodayProfit,proto3" json:"t0TodayProfit,omitempty"`         //当日盈亏
}

func (x *T0ProfitStatisticsResp) Reset() {
	*x = T0ProfitStatisticsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *T0ProfitStatisticsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*T0ProfitStatisticsResp) ProtoMessage() {}

func (x *T0ProfitStatisticsResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use T0ProfitStatisticsResp.ProtoReflect.Descriptor instead.
func (*T0ProfitStatisticsResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{24}
}

func (x *T0ProfitStatisticsResp) GetPositionProfitResp() []*T0PositionProfitStatisticsResp {
	if x != nil {
		return x.PositionProfitResp
	}
	return nil
}

func (x *T0ProfitStatisticsResp) GetTotalDealAmount() float64 {
	if x != nil {
		return x.TotalDealAmount
	}
	return 0
}

func (x *T0ProfitStatisticsResp) GetT0TotalProfit() float64 {
	if x != nil {
		return x.T0TotalProfit
	}
	return 0
}

func (x *T0ProfitStatisticsResp) GetTodayDealAmount() float64 {
	if x != nil {
		return x.TodayDealAmount
	}
	return 0
}

func (x *T0ProfitStatisticsResp) GetT0TodayProfit() float64 {
	if x != nil {
		return x.T0TodayProfit
	}
	return 0
}

type T0PositionProfitStatisticsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 股票代码
	Stocks string `protobuf:"bytes,1,opt,name=stocks,proto3" json:"stocks,omitempty"`
	// 股票名字
	Name              string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	T0ProfitRate      float64 `protobuf:"fixed64,3,opt,name=t0profitRate,proto3" json:"t0profitRate,omitempty"`            // t0浮盈比例
	T0Profit          float64 `protobuf:"fixed64,4,opt,name=t0profit,proto3" json:"t0profit,omitempty"`                    //t0 盈亏
	ChildAccount      string  `protobuf:"bytes,5,opt,name=childAccount,proto3" json:"childAccount,omitempty"`              //子账户编号
	ChildId           int32   `protobuf:"varint,6,opt,name=childId,proto3" json:"childId,omitempty"`                       //子账户id
	DealCount         int32   `protobuf:"varint,7,opt,name=dealCount,proto3" json:"dealCount,omitempty"`                   //交易笔数
	BuyAmount         float64 `protobuf:"fixed64,8,opt,name=buyAmount,proto3" json:"buyAmount,omitempty"`                  //买入金额
	SellAmount        float64 `protobuf:"fixed64,9,opt,name=sellAmount,proto3" json:"sellAmount,omitempty"`                //卖出金额
	Cost              float64 `protobuf:"fixed64,10,opt,name=cost,proto3" json:"cost,omitempty"`                           //手续费
	TotalDealNumber   int32   `protobuf:"varint,11,opt,name=totalDealNumber,proto3" json:"totalDealNumber,omitempty"`      //总成交股数
	Suffix            string  `protobuf:"bytes,12,opt,name=suffix,proto3" json:"suffix,omitempty"`                         //交易所
	T0TodayProfitRate float64 `protobuf:"fixed64,13,opt,name=t0TodayProfitRate,proto3" json:"t0TodayProfitRate,omitempty"` //当日  t0浮盈比例
	T0TodayProfit     float64 `protobuf:"fixed64,14,opt,name=t0TodayProfit,proto3" json:"t0TodayProfit,omitempty"`         //当日 t0 盈亏
	TodayDealCount    int32   `protobuf:"varint,15,opt,name=todayDealCount,proto3" json:"todayDealCount,omitempty"`        //当日交易笔数
	TodayBuyAmount    float64 `protobuf:"fixed64,16,opt,name=todayBuyAmount,proto3" json:"todayBuyAmount,omitempty"`       //当日买入金额
	TodaySellAmount   float64 `protobuf:"fixed64,17,opt,name=todaySellAmount,proto3" json:"todaySellAmount,omitempty"`     //当日卖出金额
	TodayCost         float64 `protobuf:"fixed64,18,opt,name=todayCost,proto3" json:"todayCost,omitempty"`                 //当日手续费
	TodayDealNumber   int32   `protobuf:"varint,19,opt,name=todayDealNumber,proto3" json:"todayDealNumber,omitempty"`      //当日成交股数
}

func (x *T0PositionProfitStatisticsResp) Reset() {
	*x = T0PositionProfitStatisticsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *T0PositionProfitStatisticsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*T0PositionProfitStatisticsResp) ProtoMessage() {}

func (x *T0PositionProfitStatisticsResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use T0PositionProfitStatisticsResp.ProtoReflect.Descriptor instead.
func (*T0PositionProfitStatisticsResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{25}
}

func (x *T0PositionProfitStatisticsResp) GetStocks() string {
	if x != nil {
		return x.Stocks
	}
	return ""
}

func (x *T0PositionProfitStatisticsResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *T0PositionProfitStatisticsResp) GetT0ProfitRate() float64 {
	if x != nil {
		return x.T0ProfitRate
	}
	return 0
}

func (x *T0PositionProfitStatisticsResp) GetT0Profit() float64 {
	if x != nil {
		return x.T0Profit
	}
	return 0
}

func (x *T0PositionProfitStatisticsResp) GetChildAccount() string {
	if x != nil {
		return x.ChildAccount
	}
	return ""
}

func (x *T0PositionProfitStatisticsResp) GetChildId() int32 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

func (x *T0PositionProfitStatisticsResp) GetDealCount() int32 {
	if x != nil {
		return x.DealCount
	}
	return 0
}

func (x *T0PositionProfitStatisticsResp) GetBuyAmount() float64 {
	if x != nil {
		return x.BuyAmount
	}
	return 0
}

func (x *T0PositionProfitStatisticsResp) GetSellAmount() float64 {
	if x != nil {
		return x.SellAmount
	}
	return 0
}

func (x *T0PositionProfitStatisticsResp) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *T0PositionProfitStatisticsResp) GetTotalDealNumber() int32 {
	if x != nil {
		return x.TotalDealNumber
	}
	return 0
}

func (x *T0PositionProfitStatisticsResp) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *T0PositionProfitStatisticsResp) GetT0TodayProfitRate() float64 {
	if x != nil {
		return x.T0TodayProfitRate
	}
	return 0
}

func (x *T0PositionProfitStatisticsResp) GetT0TodayProfit() float64 {
	if x != nil {
		return x.T0TodayProfit
	}
	return 0
}

func (x *T0PositionProfitStatisticsResp) GetTodayDealCount() int32 {
	if x != nil {
		return x.TodayDealCount
	}
	return 0
}

func (x *T0PositionProfitStatisticsResp) GetTodayBuyAmount() float64 {
	if x != nil {
		return x.TodayBuyAmount
	}
	return 0
}

func (x *T0PositionProfitStatisticsResp) GetTodaySellAmount() float64 {
	if x != nil {
		return x.TodaySellAmount
	}
	return 0
}

func (x *T0PositionProfitStatisticsResp) GetTodayCost() float64 {
	if x != nil {
		return x.TodayCost
	}
	return 0
}

func (x *T0PositionProfitStatisticsResp) GetTodayDealNumber() int32 {
	if x != nil {
		return x.TodayDealNumber
	}
	return 0
}

type AddOptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` //000001.SZ
}

func (x *AddOptReq) Reset() {
	*x = AddOptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOptReq) ProtoMessage() {}

func (x *AddOptReq) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOptReq.ProtoReflect.Descriptor instead.
func (*AddOptReq) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{26}
}

func (x *AddOptReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type DeleteOptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` //000001.SZ
}

func (x *DeleteOptReq) Reset() {
	*x = DeleteOptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOptReq) ProtoMessage() {}

func (x *DeleteOptReq) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOptReq.ProtoReflect.Descriptor instead.
func (*DeleteOptReq) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteOptReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type ModifyOptRemarkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`     //000001.SZ
	Remark string `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"` //备注
}

func (x *ModifyOptRemarkReq) Reset() {
	*x = ModifyOptRemarkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyOptRemarkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyOptRemarkReq) ProtoMessage() {}

func (x *ModifyOptRemarkReq) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyOptRemarkReq.ProtoReflect.Descriptor instead.
func (*ModifyOptRemarkReq) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{28}
}

func (x *ModifyOptRemarkReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ModifyOptRemarkReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

//自选对象
type OptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	//现价
	LastPrice string `protobuf:"bytes,3,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`
	//涨跌=昨收-现价
	Change string `protobuf:"bytes,4,opt,name=change,proto3" json:"change,omitempty"`
	//涨跌幅=涨跌/昨收
	ChangeLimit string `protobuf:"bytes,5,opt,name=changeLimit,proto3" json:"changeLimit,omitempty"`
	//最高价
	HighPrice string `protobuf:"bytes,6,opt,name=highPrice,proto3" json:"highPrice,omitempty"`
	//最低价
	LowPrice string `protobuf:"bytes,7,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`
	//昨收
	PreClose string `protobuf:"bytes,8,opt,name=preClose,proto3" json:"preClose,omitempty"`
	//成交额
	TurnoverValue string `protobuf:"bytes,9,opt,name=turnoverValue,proto3" json:"turnoverValue,omitempty"`
	//成交量
	TurnoverVol string `protobuf:"bytes,10,opt,name=turnoverVol,proto3" json:"turnoverVol,omitempty"`
	//昨结算
	PreSettlementPrice string `protobuf:"bytes,11,opt,name=preSettlementPrice,proto3" json:"preSettlementPrice,omitempty"`
	//备注
	Remark string `protobuf:"bytes,12,opt,name=remark,proto3" json:"remark,omitempty"`
	//总股本
	TotalStock string `protobuf:"bytes,13,opt,name=totalStock,proto3" json:"totalStock,omitempty"`
	//流通股本
	FloatStock string `protobuf:"bytes,14,opt,name=floatStock,proto3" json:"floatStock,omitempty"`
}

func (x *OptResp) Reset() {
	*x = OptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptResp) ProtoMessage() {}

func (x *OptResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptResp.ProtoReflect.Descriptor instead.
func (*OptResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{29}
}

func (x *OptResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OptResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OptResp) GetLastPrice() string {
	if x != nil {
		return x.LastPrice
	}
	return ""
}

func (x *OptResp) GetChange() string {
	if x != nil {
		return x.Change
	}
	return ""
}

func (x *OptResp) GetChangeLimit() string {
	if x != nil {
		return x.ChangeLimit
	}
	return ""
}

func (x *OptResp) GetHighPrice() string {
	if x != nil {
		return x.HighPrice
	}
	return ""
}

func (x *OptResp) GetLowPrice() string {
	if x != nil {
		return x.LowPrice
	}
	return ""
}

func (x *OptResp) GetPreClose() string {
	if x != nil {
		return x.PreClose
	}
	return ""
}

func (x *OptResp) GetTurnoverValue() string {
	if x != nil {
		return x.TurnoverValue
	}
	return ""
}

func (x *OptResp) GetTurnoverVol() string {
	if x != nil {
		return x.TurnoverVol
	}
	return ""
}

func (x *OptResp) GetPreSettlementPrice() string {
	if x != nil {
		return x.PreSettlementPrice
	}
	return ""
}

func (x *OptResp) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *OptResp) GetTotalStock() string {
	if x != nil {
		return x.TotalStock
	}
	return ""
}

func (x *OptResp) GetFloatStock() string {
	if x != nil {
		return x.FloatStock
	}
	return ""
}

//修改子账户备注
type RemarkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark string `protobuf:"bytes,1,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *RemarkReq) Reset() {
	*x = RemarkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemarkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemarkReq) ProtoMessage() {}

func (x *RemarkReq) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemarkReq.ProtoReflect.Descriptor instead.
func (*RemarkReq) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{30}
}

func (x *RemarkReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

//手续费率模板
type CommissionTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommissionRate string `protobuf:"bytes,1,opt,name=commissionRate,proto3" json:"commissionRate,omitempty"` //佣金费率
	CommissionMin  string `protobuf:"bytes,2,opt,name=commissionMin,proto3" json:"commissionMin,omitempty"`   //最低佣金
	StampDuty      string `protobuf:"bytes,3,opt,name=stampDuty,proto3" json:"stampDuty,omitempty"`           //印花税  只有卖出时才收
	TransferFee    string `protobuf:"bytes,4,opt,name=transferFee,proto3" json:"transferFee,omitempty"`       //过户费  只有上交所收
	StockType      int32  `protobuf:"varint,5,opt,name=stockType,proto3" json:"stockType,omitempty"`          //  证券类型  1：股票   2： 可转债  3:逆回购  4:基金  5:lof基金  6:融资融券  7:etf期权
	AccountId      string `protobuf:"bytes,6,opt,name=accountId,proto3" json:"accountId,omitempty"`           // 账户id
	Exchange       int32  `protobuf:"varint,7,opt,name=exchange,proto3" json:"exchange,omitempty"`            //0：上交所    1：深交所
	FinancingRate  string `protobuf:"bytes,8,opt,name=financingRate,proto3" json:"financingRate,omitempty"`   //融资利息
	MarginRate     string `protobuf:"bytes,9,opt,name=marginRate,proto3" json:"marginRate,omitempty"`         //融券费率
	SettleFee      string `protobuf:"bytes,10,opt,name=settleFee,proto3" json:"settleFee,omitempty"`          //交易结算费  期权
	HandingFee     string `protobuf:"bytes,11,opt,name=handingFee,proto3" json:"handingFee,omitempty"`        //交易经手费  期权
	ExerciseFee    string `protobuf:"bytes,12,opt,name=exerciseFee,proto3" json:"exerciseFee,omitempty"`      //行权手续费  期权
}

func (x *CommissionTemplate) Reset() {
	*x = CommissionTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommissionTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommissionTemplate) ProtoMessage() {}

func (x *CommissionTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommissionTemplate.ProtoReflect.Descriptor instead.
func (*CommissionTemplate) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{31}
}

func (x *CommissionTemplate) GetCommissionRate() string {
	if x != nil {
		return x.CommissionRate
	}
	return ""
}

func (x *CommissionTemplate) GetCommissionMin() string {
	if x != nil {
		return x.CommissionMin
	}
	return ""
}

func (x *CommissionTemplate) GetStampDuty() string {
	if x != nil {
		return x.StampDuty
	}
	return ""
}

func (x *CommissionTemplate) GetTransferFee() string {
	if x != nil {
		return x.TransferFee
	}
	return ""
}

func (x *CommissionTemplate) GetStockType() int32 {
	if x != nil {
		return x.StockType
	}
	return 0
}

func (x *CommissionTemplate) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CommissionTemplate) GetExchange() int32 {
	if x != nil {
		return x.Exchange
	}
	return 0
}

func (x *CommissionTemplate) GetFinancingRate() string {
	if x != nil {
		return x.FinancingRate
	}
	return ""
}

func (x *CommissionTemplate) GetMarginRate() string {
	if x != nil {
		return x.MarginRate
	}
	return ""
}

func (x *CommissionTemplate) GetSettleFee() string {
	if x != nil {
		return x.SettleFee
	}
	return ""
}

func (x *CommissionTemplate) GetHandingFee() string {
	if x != nil {
		return x.HandingFee
	}
	return ""
}

func (x *CommissionTemplate) GetExerciseFee() string {
	if x != nil {
		return x.ExerciseFee
	}
	return ""
}

//推送 手续费率变动
type PushCommissionTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubAccountId       int32                 `protobuf:"varint,1,opt,name=subAccountId,proto3" json:"subAccountId,omitempty"`
	CommissionTemplate []*CommissionTemplate `protobuf:"bytes,2,rep,name=commissionTemplate,proto3" json:"commissionTemplate,omitempty"`
}

func (x *PushCommissionTemplate) Reset() {
	*x = PushCommissionTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushCommissionTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushCommissionTemplate) ProtoMessage() {}

func (x *PushCommissionTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushCommissionTemplate.ProtoReflect.Descriptor instead.
func (*PushCommissionTemplate) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{32}
}

func (x *PushCommissionTemplate) GetSubAccountId() int32 {
	if x != nil {
		return x.SubAccountId
	}
	return 0
}

func (x *PushCommissionTemplate) GetCommissionTemplate() []*CommissionTemplate {
	if x != nil {
		return x.CommissionTemplate
	}
	return nil
}

//条件单 实体
type ConditionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StockCode            string           `protobuf:"bytes,2,opt,name=stockCode,proto3" json:"stockCode,omitempty"`                        //股票代码
	Suffix               string           `protobuf:"bytes,3,opt,name=suffix,proto3" json:"suffix,omitempty"`                              //交易所代码
	SubAccountId         int32            `protobuf:"varint,4,opt,name=subAccountId,proto3" json:"subAccountId,omitempty"`                 //操作账号id
	TClientId            int32            `protobuf:"varint,5,opt,name=tClientId,proto3" json:"tClientId,omitempty"`                       //交易员id
	OrderType            int32            `protobuf:"varint,6,opt,name=orderType,proto3" json:"orderType,omitempty"`                       //下单类型  0：买入  1：卖出
	RunStatus            int32            `protobuf:"varint,7,opt,name=runStatus,proto3" json:"runStatus,omitempty"`                       // 运行状态  1：运行中  2：已暂停  3：已触发  4：已过期
	TriggerType          int32            `protobuf:"varint,8,opt,name=triggerType,proto3" json:"triggerType,omitempty"`                   // 触发类型  1：涨幅条件  2：股价条件  3：反弹买入  4：定时  5：涨停买入  6：止盈止损
	TriggerCondition     string           `protobuf:"bytes,9,opt,name=triggerCondition,proto3" json:"triggerCondition,omitempty"`          // 触发条件
	TriggerConditionDesc string           `protobuf:"bytes,10,opt,name=triggerConditionDesc,proto3" json:"triggerConditionDesc,omitempty"` // 触发条件描述
	TriggerExecType      int32            `protobuf:"varint,11,opt,name=triggerExecType,proto3" json:"triggerExecType,omitempty"`          //  触发后 操作方式  0：手动操作  1：自动操作
	CreateTime           int64            `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`                    // 创建时间 时间戳
	TriggerTime          int64            `protobuf:"varint,13,opt,name=triggerTime,proto3" json:"triggerTime,omitempty"`                  // 触发时间
	ExecTime             int64            `protobuf:"varint,14,opt,name=execTime,proto3" json:"execTime,omitempty"`                        //执行时间
	ExecStatus           int32            `protobuf:"varint,15,opt,name=execStatus,proto3" json:"execStatus,omitempty"`                    //执行状态 0：未执行  1：已执行  2：执行过期
	OrderId              int32            `protobuf:"varint,16,opt,name=orderId,proto3" json:"orderId,omitempty"`                          //委托id
	Days                 int32            `protobuf:"varint,17,opt,name=days,proto3" json:"days,omitempty"`                                //有效天数
	ExpiredDay           int64            `protobuf:"varint,18,opt,name=expiredDay,proto3" json:"expiredDay,omitempty"`                    // 过期日期
	OrderPriceType       string           `protobuf:"bytes,19,opt,name=orderPriceType,proto3" json:"orderPriceType,omitempty"`             // 价格类型  lastest("最新价"), cost("成本价"),bid_1("买一价"),bid_2("买二价"),bid_3("买三价"), bid_4("买四价"),bid_5("买五价"),ask_1("卖一价"),ask_2("卖二价"),ask_3("卖三价"),ask_4("卖四价"),ask_5("卖五价"),high_limit("涨停价"),low_limit("跌停价"),
	FloatPrice           string           `protobuf:"bytes,20,opt,name=floatPrice,proto3" json:"floatPrice,omitempty"`                     // 浮动价格
	OrderMoneyType       int32            `protobuf:"varint,21,opt,name=orderMoneyType,proto3" json:"orderMoneyType,omitempty"`            //  金额类型 1：按数量  2：按金额
	OrderMoney           string           `protobuf:"bytes,22,opt,name=orderMoney,proto3" json:"orderMoney,omitempty"`                     // 下单金额
	OrderNum             int32            `protobuf:"varint,23,opt,name=orderNum,proto3" json:"orderNum,omitempty"`                        //下单数目
	TaskTime             int64            `protobuf:"varint,24,opt,name=taskTime,proto3" json:"taskTime,omitempty"`                        // 定时触发时间
	RealOrderPrice       string           `protobuf:"bytes,25,opt,name=realOrderPrice,proto3" json:"realOrderPrice,omitempty"`             //实际委托价格
	RealOrderNum         string           `protobuf:"bytes,26,opt,name=realOrderNum,proto3" json:"realOrderNum,omitempty"`                 // 实际委托数目
	ExecException        string           `protobuf:"bytes,27,opt,name=execException,proto3" json:"execException,omitempty"`               // 执行错误信息
	RunStatusDesc        string           `protobuf:"bytes,28,opt,name=runStatusDesc,proto3" json:"runStatusDesc,omitempty"`               // 运行状态 描述
	TriggerTypeDesc      string           `protobuf:"bytes,29,opt,name=triggerTypeDesc,proto3" json:"triggerTypeDesc,omitempty"`           // 触发类型 描述
	OrderPriceTypeDesc   string           `protobuf:"bytes,30,opt,name=orderPriceTypeDesc,proto3" json:"orderPriceTypeDesc,omitempty"`     //价格类型 描述
	Name                 string           `protobuf:"bytes,31,opt,name=name,proto3" json:"name,omitempty"`                                 // 股票名
	AccountInfo          *AccountInfoResp `protobuf:"bytes,32,opt,name=accountInfo,proto3" json:"accountInfo,omitempty"`                   //子账户 信息
}

func (x *ConditionOrder) Reset() {
	*x = ConditionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOrder) ProtoMessage() {}

func (x *ConditionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOrder.ProtoReflect.Descriptor instead.
func (*ConditionOrder) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{33}
}

func (x *ConditionOrder) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConditionOrder) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *ConditionOrder) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *ConditionOrder) GetSubAccountId() int32 {
	if x != nil {
		return x.SubAccountId
	}
	return 0
}

func (x *ConditionOrder) GetTClientId() int32 {
	if x != nil {
		return x.TClientId
	}
	return 0
}

func (x *ConditionOrder) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *ConditionOrder) GetRunStatus() int32 {
	if x != nil {
		return x.RunStatus
	}
	return 0
}

func (x *ConditionOrder) GetTriggerType() int32 {
	if x != nil {
		return x.TriggerType
	}
	return 0
}

func (x *ConditionOrder) GetTriggerCondition() string {
	if x != nil {
		return x.TriggerCondition
	}
	return ""
}

func (x *ConditionOrder) GetTriggerConditionDesc() string {
	if x != nil {
		return x.TriggerConditionDesc
	}
	return ""
}

func (x *ConditionOrder) GetTriggerExecType() int32 {
	if x != nil {
		return x.TriggerExecType
	}
	return 0
}

func (x *ConditionOrder) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ConditionOrder) GetTriggerTime() int64 {
	if x != nil {
		return x.TriggerTime
	}
	return 0
}

func (x *ConditionOrder) GetExecTime() int64 {
	if x != nil {
		return x.ExecTime
	}
	return 0
}

func (x *ConditionOrder) GetExecStatus() int32 {
	if x != nil {
		return x.ExecStatus
	}
	return 0
}

func (x *ConditionOrder) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ConditionOrder) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *ConditionOrder) GetExpiredDay() int64 {
	if x != nil {
		return x.ExpiredDay
	}
	return 0
}

func (x *ConditionOrder) GetOrderPriceType() string {
	if x != nil {
		return x.OrderPriceType
	}
	return ""
}

func (x *ConditionOrder) GetFloatPrice() string {
	if x != nil {
		return x.FloatPrice
	}
	return ""
}

func (x *ConditionOrder) GetOrderMoneyType() int32 {
	if x != nil {
		return x.OrderMoneyType
	}
	return 0
}

func (x *ConditionOrder) GetOrderMoney() string {
	if x != nil {
		return x.OrderMoney
	}
	return ""
}

func (x *ConditionOrder) GetOrderNum() int32 {
	if x != nil {
		return x.OrderNum
	}
	return 0
}

func (x *ConditionOrder) GetTaskTime() int64 {
	if x != nil {
		return x.TaskTime
	}
	return 0
}

func (x *ConditionOrder) GetRealOrderPrice() string {
	if x != nil {
		return x.RealOrderPrice
	}
	return ""
}

func (x *ConditionOrder) GetRealOrderNum() string {
	if x != nil {
		return x.RealOrderNum
	}
	return ""
}

func (x *ConditionOrder) GetExecException() string {
	if x != nil {
		return x.ExecException
	}
	return ""
}

func (x *ConditionOrder) GetRunStatusDesc() string {
	if x != nil {
		return x.RunStatusDesc
	}
	return ""
}

func (x *ConditionOrder) GetTriggerTypeDesc() string {
	if x != nil {
		return x.TriggerTypeDesc
	}
	return ""
}

func (x *ConditionOrder) GetOrderPriceTypeDesc() string {
	if x != nil {
		return x.OrderPriceTypeDesc
	}
	return ""
}

func (x *ConditionOrder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConditionOrder) GetAccountInfo() *AccountInfoResp {
	if x != nil {
		return x.AccountInfo
	}
	return nil
}

//添加、修改 条件单
type ConditionOrderAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StockCode        string `protobuf:"bytes,2,opt,name=stockCode,proto3" json:"stockCode,omitempty"`               //股票代码
	Suffix           string `protobuf:"bytes,3,opt,name=suffix,proto3" json:"suffix,omitempty"`                     //交易所代码
	SubAccountId     int32  `protobuf:"varint,4,opt,name=subAccountId,proto3" json:"subAccountId,omitempty"`        //操作账号id
	TClientId        int32  `protobuf:"varint,5,opt,name=tClientId,proto3" json:"tClientId,omitempty"`              //交易员id
	OrderType        int32  `protobuf:"varint,6,opt,name=orderType,proto3" json:"orderType,omitempty"`              //下单类型  0：买入  1：卖出
	TriggerType      int32  `protobuf:"varint,7,opt,name=triggerType,proto3" json:"triggerType,omitempty"`          // 触发类型  1：涨幅条件  2：股价条件  3：反弹买入  4：定时  5：涨停买入  6：止盈止损
	TriggerCondition string `protobuf:"bytes,8,opt,name=triggerCondition,proto3" json:"triggerCondition,omitempty"` // 触发条件
	TriggerExecType  int32  `protobuf:"varint,9,opt,name=triggerExecType,proto3" json:"triggerExecType,omitempty"`  //  触发后 操作方式  0：手动操作  1：自动操作
	Days             int32  `protobuf:"varint,10,opt,name=days,proto3" json:"days,omitempty"`                       //有效天数
	OrderPriceType   string `protobuf:"bytes,11,opt,name=orderPriceType,proto3" json:"orderPriceType,omitempty"`    // 价格类型  lastest("最新价"), cost("成本价"),bid_1("买一价"),bid_2("买二价"),bid_3("买三价"), bid_4("买四价"),bid_5("买五价"),ask_1("卖一价"),ask_2("卖二价"),ask_3("卖三价"),ask_4("卖四价"),ask_5("卖五价"),high_limit("涨停价"),low_limit("跌停价"),
	FloatPrice       string `protobuf:"bytes,12,opt,name=floatPrice,proto3" json:"floatPrice,omitempty"`            // 浮动价格
	OrderMoneyType   int32  `protobuf:"varint,13,opt,name=orderMoneyType,proto3" json:"orderMoneyType,omitempty"`   //  金额类型 1：按数量  2：按金额
	OrderMoney       string `protobuf:"bytes,14,opt,name=orderMoney,proto3" json:"orderMoney,omitempty"`            // 下单金额
	OrderNum         int32  `protobuf:"varint,15,opt,name=orderNum,proto3" json:"orderNum,omitempty"`               //下单数目
}

func (x *ConditionOrderAddReq) Reset() {
	*x = ConditionOrderAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOrderAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOrderAddReq) ProtoMessage() {}

func (x *ConditionOrderAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOrderAddReq.ProtoReflect.Descriptor instead.
func (*ConditionOrderAddReq) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{34}
}

func (x *ConditionOrderAddReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConditionOrderAddReq) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *ConditionOrderAddReq) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *ConditionOrderAddReq) GetSubAccountId() int32 {
	if x != nil {
		return x.SubAccountId
	}
	return 0
}

func (x *ConditionOrderAddReq) GetTClientId() int32 {
	if x != nil {
		return x.TClientId
	}
	return 0
}

func (x *ConditionOrderAddReq) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *ConditionOrderAddReq) GetTriggerType() int32 {
	if x != nil {
		return x.TriggerType
	}
	return 0
}

func (x *ConditionOrderAddReq) GetTriggerCondition() string {
	if x != nil {
		return x.TriggerCondition
	}
	return ""
}

func (x *ConditionOrderAddReq) GetTriggerExecType() int32 {
	if x != nil {
		return x.TriggerExecType
	}
	return 0
}

func (x *ConditionOrderAddReq) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *ConditionOrderAddReq) GetOrderPriceType() string {
	if x != nil {
		return x.OrderPriceType
	}
	return ""
}

func (x *ConditionOrderAddReq) GetFloatPrice() string {
	if x != nil {
		return x.FloatPrice
	}
	return ""
}

func (x *ConditionOrderAddReq) GetOrderMoneyType() int32 {
	if x != nil {
		return x.OrderMoneyType
	}
	return 0
}

func (x *ConditionOrderAddReq) GetOrderMoney() string {
	if x != nil {
		return x.OrderMoney
	}
	return ""
}

func (x *ConditionOrderAddReq) GetOrderNum() int32 {
	if x != nil {
		return x.OrderNum
	}
	return 0
}

//条件单  添加 / 修改 响应
type ConditionOrderAddResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionOrder *ConditionOrder `protobuf:"bytes,1,opt,name=conditionOrder,proto3" json:"conditionOrder,omitempty"`
}

func (x *ConditionOrderAddResp) Reset() {
	*x = ConditionOrderAddResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOrderAddResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOrderAddResp) ProtoMessage() {}

func (x *ConditionOrderAddResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOrderAddResp.ProtoReflect.Descriptor instead.
func (*ConditionOrderAddResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{35}
}

func (x *ConditionOrderAddResp) GetConditionOrder() *ConditionOrder {
	if x != nil {
		return x.ConditionOrder
	}
	return nil
}

//修改条件单状态 （批量）  请求
type ConditionOrderChangeStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdList []int32 `protobuf:"varint,1,rep,packed,name=idList,proto3" json:"idList,omitempty"` //条件单 id 列表
	Status int32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`        // 状态   1：运行  2：暂停
}

func (x *ConditionOrderChangeStatusReq) Reset() {
	*x = ConditionOrderChangeStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOrderChangeStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOrderChangeStatusReq) ProtoMessage() {}

func (x *ConditionOrderChangeStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOrderChangeStatusReq.ProtoReflect.Descriptor instead.
func (*ConditionOrderChangeStatusReq) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{36}
}

func (x *ConditionOrderChangeStatusReq) GetIdList() []int32 {
	if x != nil {
		return x.IdList
	}
	return nil
}

func (x *ConditionOrderChangeStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

//修改条件单状态 （批量） 响应
type ConditionOrderChangeStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdList []int32 `protobuf:"varint,1,rep,packed,name=idList,proto3" json:"idList,omitempty"` //条件单 id 列表
	Status int32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`        // 状态   1：运行  2：暂停
}

func (x *ConditionOrderChangeStatusResp) Reset() {
	*x = ConditionOrderChangeStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOrderChangeStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOrderChangeStatusResp) ProtoMessage() {}

func (x *ConditionOrderChangeStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOrderChangeStatusResp.ProtoReflect.Descriptor instead.
func (*ConditionOrderChangeStatusResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{37}
}

func (x *ConditionOrderChangeStatusResp) GetIdList() []int32 {
	if x != nil {
		return x.IdList
	}
	return nil
}

func (x *ConditionOrderChangeStatusResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

//删除条件单（批量）
type ConditionOrderDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdList []int32 `protobuf:"varint,1,rep,packed,name=idList,proto3" json:"idList,omitempty"` //条件单 id 列表
}

func (x *ConditionOrderDeleteReq) Reset() {
	*x = ConditionOrderDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOrderDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOrderDeleteReq) ProtoMessage() {}

func (x *ConditionOrderDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOrderDeleteReq.ProtoReflect.Descriptor instead.
func (*ConditionOrderDeleteReq) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{38}
}

func (x *ConditionOrderDeleteReq) GetIdList() []int32 {
	if x != nil {
		return x.IdList
	}
	return nil
}

//删除条件单（批量） 响应
type ConditionOrderDeleteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdList []int32 `protobuf:"varint,1,rep,packed,name=idList,proto3" json:"idList,omitempty"` //条件单 id 列表
}

func (x *ConditionOrderDeleteResp) Reset() {
	*x = ConditionOrderDeleteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOrderDeleteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOrderDeleteResp) ProtoMessage() {}

func (x *ConditionOrderDeleteResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOrderDeleteResp.ProtoReflect.Descriptor instead.
func (*ConditionOrderDeleteResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{39}
}

func (x *ConditionOrderDeleteResp) GetIdList() []int32 {
	if x != nil {
		return x.IdList
	}
	return nil
}

//条件单 触发 推送
type PushConditionOrderTriggerd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionOrder *ConditionOrder `protobuf:"bytes,1,opt,name=conditionOrder,proto3" json:"conditionOrder,omitempty"` //触发的条件单
}

func (x *PushConditionOrderTriggerd) Reset() {
	*x = PushConditionOrderTriggerd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushConditionOrderTriggerd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushConditionOrderTriggerd) ProtoMessage() {}

func (x *PushConditionOrderTriggerd) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushConditionOrderTriggerd.ProtoReflect.Descriptor instead.
func (*PushConditionOrderTriggerd) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{40}
}

func (x *PushConditionOrderTriggerd) GetConditionOrder() *ConditionOrder {
	if x != nil {
		return x.ConditionOrder
	}
	return nil
}

//条件单  确认  请求
type ConditionOrderConfirmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ConditionOrderConfirmReq) Reset() {
	*x = ConditionOrderConfirmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOrderConfirmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOrderConfirmReq) ProtoMessage() {}

func (x *ConditionOrderConfirmReq) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOrderConfirmReq.ProtoReflect.Descriptor instead.
func (*ConditionOrderConfirmReq) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{41}
}

func (x *ConditionOrderConfirmReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

//条件单 确认   响应
type ConditionOrderConfirmResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionOrder *ConditionOrder `protobuf:"bytes,1,opt,name=conditionOrder,proto3" json:"conditionOrder,omitempty"` //条件单数据
}

func (x *ConditionOrderConfirmResp) Reset() {
	*x = ConditionOrderConfirmResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOrderConfirmResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOrderConfirmResp) ProtoMessage() {}

func (x *ConditionOrderConfirmResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOrderConfirmResp.ProtoReflect.Descriptor instead.
func (*ConditionOrderConfirmResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{42}
}

func (x *ConditionOrderConfirmResp) GetConditionOrder() *ConditionOrder {
	if x != nil {
		return x.ConditionOrder
	}
	return nil
}

// 下单请求返回
type BatchOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRespType OrderResp_OrderRespType `protobuf:"varint,1,opt,name=orderRespType,proto3,enum=tradeStock.OrderResp_OrderRespType" json:"orderRespType,omitempty"`
	Message       string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` //错误信息
}

func (x *BatchOrderResp) Reset() {
	*x = BatchOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOrderResp) ProtoMessage() {}

func (x *BatchOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOrderResp.ProtoReflect.Descriptor instead.
func (*BatchOrderResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{43}
}

func (x *BatchOrderResp) GetOrderRespType() OrderResp_OrderRespType {
	if x != nil {
		return x.OrderRespType
	}
	return OrderResp_success
}

func (x *BatchOrderResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//修改密码
type ChangePasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldPassword  string `protobuf:"bytes,1,opt,name=oldPassword,proto3" json:"oldPassword,omitempty"`   //原密码
	NewPasswword string `protobuf:"bytes,2,opt,name=newPasswword,proto3" json:"newPasswword,omitempty"` //新密码
}

func (x *ChangePasswordReq) Reset() {
	*x = ChangePasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordReq) ProtoMessage() {}

func (x *ChangePasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordReq.ProtoReflect.Descriptor instead.
func (*ChangePasswordReq) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{44}
}

func (x *ChangePasswordReq) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *ChangePasswordReq) GetNewPasswword() string {
	if x != nil {
		return x.NewPasswword
	}
	return ""
}

//港股基本信息 响应类型：QUERY_HK_STOCK_INFO
type HkStockInfoFieldResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//股票名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//股票code
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	//股票后缀
	Suffix string `protobuf:"bytes,3,opt,name=suffix,proto3" json:"suffix,omitempty"`
	//是否是沪港通  1是   0不是
	IsSHHK string `protobuf:"bytes,4,opt,name=isSHHK,proto3" json:"isSHHK,omitempty"`
	//是否是深港通  1是  2不是
	IsSZHK string `protobuf:"bytes,5,opt,name=isSZHK,proto3" json:"isSZHK,omitempty"`
	//每手多少股
	VolumeMultiple int32 `protobuf:"varint,6,opt,name=volumeMultiple,proto3" json:"volumeMultiple,omitempty"`
}

func (x *HkStockInfoFieldResp) Reset() {
	*x = HkStockInfoFieldResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HkStockInfoFieldResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HkStockInfoFieldResp) ProtoMessage() {}

func (x *HkStockInfoFieldResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HkStockInfoFieldResp.ProtoReflect.Descriptor instead.
func (*HkStockInfoFieldResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{45}
}

func (x *HkStockInfoFieldResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HkStockInfoFieldResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *HkStockInfoFieldResp) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *HkStockInfoFieldResp) GetIsSHHK() string {
	if x != nil {
		return x.IsSHHK
	}
	return ""
}

func (x *HkStockInfoFieldResp) GetIsSZHK() string {
	if x != nil {
		return x.IsSZHK
	}
	return ""
}

func (x *HkStockInfoFieldResp) GetVolumeMultiple() int32 {
	if x != nil {
		return x.VolumeMultiple
	}
	return 0
}

//交易汇率查询 响应类型：QUERY_CONSULT_EXCHANGE_RATE
type HkConsultExchangeRateFieldResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//深港通交易汇率
	SzConsultExchangeRate *HkConsultExchangeRateField `protobuf:"bytes,1,opt,name=szConsultExchangeRate,proto3" json:"szConsultExchangeRate,omitempty"`
	//沪港通交易汇率
	ShConsultExchangeRate *HkConsultExchangeRateField `protobuf:"bytes,2,opt,name=shConsultExchangeRate,proto3" json:"shConsultExchangeRate,omitempty"`
	// 深港通结算汇率
	SettleSzConsultExchangeRate *HkConsultExchangeRateField `protobuf:"bytes,3,opt,name=settleSzConsultExchangeRate,proto3" json:"settleSzConsultExchangeRate,omitempty"`
	//沪港通结算汇率
	SettleShConsultExchangeRate *HkConsultExchangeRateField `protobuf:"bytes,4,opt,name=settleShConsultExchangeRate,proto3" json:"settleShConsultExchangeRate,omitempty"`
}

func (x *HkConsultExchangeRateFieldResp) Reset() {
	*x = HkConsultExchangeRateFieldResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HkConsultExchangeRateFieldResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HkConsultExchangeRateFieldResp) ProtoMessage() {}

func (x *HkConsultExchangeRateFieldResp) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HkConsultExchangeRateFieldResp.ProtoReflect.Descriptor instead.
func (*HkConsultExchangeRateFieldResp) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{46}
}

func (x *HkConsultExchangeRateFieldResp) GetSzConsultExchangeRate() *HkConsultExchangeRateField {
	if x != nil {
		return x.SzConsultExchangeRate
	}
	return nil
}

func (x *HkConsultExchangeRateFieldResp) GetShConsultExchangeRate() *HkConsultExchangeRateField {
	if x != nil {
		return x.ShConsultExchangeRate
	}
	return nil
}

func (x *HkConsultExchangeRateFieldResp) GetSettleSzConsultExchangeRate() *HkConsultExchangeRateField {
	if x != nil {
		return x.SettleSzConsultExchangeRate
	}
	return nil
}

func (x *HkConsultExchangeRateFieldResp) GetSettleShConsultExchangeRate() *HkConsultExchangeRateField {
	if x != nil {
		return x.SettleShConsultExchangeRate
	}
	return nil
}

//交易汇率
type HkConsultExchangeRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//参考买入汇率
	ConsultBuyingRate string `protobuf:"bytes,1,opt,name=consultBuyingRate,proto3" json:"consultBuyingRate,omitempty"`
	//参考卖出汇率
	ConsultSellingRate string `protobuf:"bytes,2,opt,name=consultSellingRate,proto3" json:"consultSellingRate,omitempty"`
}

func (x *HkConsultExchangeRateField) Reset() {
	*x = HkConsultExchangeRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HkConsultExchangeRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HkConsultExchangeRateField) ProtoMessage() {}

func (x *HkConsultExchangeRateField) ProtoReflect() protoreflect.Message {
	mi := &file_desc_ApiTradeUjuStock_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HkConsultExchangeRateField.ProtoReflect.Descriptor instead.
func (*HkConsultExchangeRateField) Descriptor() ([]byte, []int) {
	return file_desc_ApiTradeUjuStock_proto_rawDescGZIP(), []int{47}
}

func (x *HkConsultExchangeRateField) GetConsultBuyingRate() string {
	if x != nil {
		return x.ConsultBuyingRate
	}
	return ""
}

func (x *HkConsultExchangeRateField) GetConsultSellingRate() string {
	if x != nil {
		return x.ConsultSellingRate
	}
	return ""
}

var File_desc_ApiTradeUjuStock_proto protoreflect.FileDescriptor

var file_desc_ApiTradeUjuStock_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x64, 0x65, 0x73, 0x63, 0x2f, 0x41, 0x70, 0x69, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55,
	0x6a, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0xf9, 0x02, 0x0a, 0x09, 0x57, 0x43,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x42, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x06, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7c, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x45, 0x5f, 0x57, 0x41, 0x59, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x06, 0x22, 0x93, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0xb3, 0x02,
	0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x74, 0x0a,
	0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49,
	0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x45, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x4e, 0x4f,
	0x54, 0x46, 0x49, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x4f,
	0x55, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x4f, 0x5a, 0x45,
	0x4e, 0x10, 0x07, 0x22, 0xc5, 0x0f, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65,
	0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x71, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x71, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x4f, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x70, 0x74, 0x52, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x70, 0x74, 0x52, 0x65, 0x71, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x52, 0x09,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x74,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x0a, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x54, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x52,
	0x14, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x6f, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x5d, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x52, 0x17, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x60, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x52, 0x18, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x22, 0x84, 0x07, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x51, 0x52, 0x59,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x51, 0x52, 0x59, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x52, 0x59, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x54,
	0x52, 0x55, 0x53, 0x54, 0x5f, 0x51, 0x52, 0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45,
	0x41, 0x4c, 0x5f, 0x51, 0x52, 0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x52, 0x59, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x52, 0x59, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x51, 0x52,
	0x59, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x5f, 0x51, 0x52, 0x59, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x30, 0x5f, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x30, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x75,
	0x73, 0x68, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x75,
	0x73, 0x68, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x12,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x5f, 0x4f, 0x70, 0x74, 0x10, 0x13, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x4f, 0x70, 0x74, 0x10, 0x14, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x70, 0x74, 0x5f, 0x51, 0x72, 0x79, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x10, 0x16, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x17, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x4f,
	0x70, 0x74, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x75, 0x73, 0x68, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x10, 0x19, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x1b, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x45, 0x44, 0x10, 0x1c, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x1d, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44,
	0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x1f, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x20, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x21, 0x12, 0x20, 0x0a,
	0x1c, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x22, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x23, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10,
	0x24, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x48, 0x4b, 0x5f, 0x53, 0x54,
	0x4f, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x25, 0x12, 0x1f, 0x0a, 0x1b, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x26, 0x22, 0xc6, 0x13, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52,
	0x65, 0x71, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x51, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x51, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x51, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0e, 0x65,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a,
	0x0c, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x2e, 0x44, 0x65, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0c, 0x64,
	0x65, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x33, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x64, 0x65,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6e, 0x66, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6e, 0x66, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x13, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6e, 0x66, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x52, 0x13, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6e, 0x66, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x60, 0x0a, 0x18, 0x74, 0x30, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e,
	0x54, 0x30, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x52, 0x18, 0x74, 0x30, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x54, 0x0a, 0x14, 0x74, 0x30, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x30,
	0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x14, 0x74, 0x30, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x16, 0x74, 0x30, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x30, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x52, 0x16, 0x74, 0x30,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x14, 0x70, 0x75, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x14, 0x70, 0x75, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x45, 0x6e,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x13, 0x70, 0x75, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x13, 0x70, 0x75, 0x73, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x14, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x14, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x16, 0x70, 0x75, 0x73, 0x68,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x16, 0x70, 0x75,
	0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x72, 0x0a,
	0x1e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x1e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x60, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x1a, 0x70, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x64, 0x52,
	0x1a, 0x70, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x64, 0x12, 0x63, 0x0a, 0x19, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x52, 0x19, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x50, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x48, 0x6b, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x12,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x72, 0x0a, 0x1e, 0x68, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x48, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x1e, 0x68, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41,
	0x49, 0x4c, 0x10, 0x01, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77,
	0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0xc5, 0x03, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x64,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x30, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x30, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x4e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x75, 0x6e, 0x64, 0x73, 0x48, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x48, 0x6b, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x22, 0xd1, 0x06, 0x0a, 0x10,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f,
	0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75, 0x79, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x62, 0x75, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6b,
	0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x6d, 0x62, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x62, 0x75, 0x79,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6d, 0x62, 0x12, 0x41,
	0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x6b, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x6b, 0x22,
	0x85, 0x07, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4e, 0x6f,
	0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x4e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x20, 0x0a, 0x0b, 0x45,
	0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x75,
	0x79, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x10, 0x01, 0x22, 0x78, 0x0a,
	0x0d, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08,
	0x0a, 0x04, 0x71, 0x62, 0x63, 0x6a, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x66, 0x63, 0x6a,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x66, 0x63, 0x64, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03,
	0x79, 0x73, 0x62, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x77, 0x73, 0x62, 0x10, 0x04, 0x12, 0x06,
	0x0a, 0x02, 0x63, 0x64, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x77, 0x7a, 0x10, 0x06, 0x12, 0x07,
	0x0a, 0x03, 0x77, 0x63, 0x66, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x79, 0x63, 0x66, 0x10, 0x08,
	0x12, 0x15, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x10, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x22, 0xe1, 0x0a, 0x0a, 0x0c, 0x44, 0x65, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x65,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x4e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x12, 0x41, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54,
	0x61, 0x78, 0x52, 0x6d, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x54, 0x61, 0x78, 0x52, 0x6d, 0x62, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x54, 0x61, 0x78, 0x48, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x54, 0x61, 0x78, 0x48, 0x6b, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x6d, 0x62, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x52, 0x6d, 0x62, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x48, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65,
	0x48, 0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x69, 0x65, 0x73, 0x52, 0x6d, 0x62, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x6d, 0x62, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x69, 0x65, 0x73, 0x48, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x48, 0x6b,
	0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x79, 0x52, 0x6d, 0x62, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x79, 0x52, 0x6d, 0x62,
	0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x79, 0x48, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x79, 0x48, 0x6b, 0x12, 0x2e,
	0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65,
	0x65, 0x52, 0x6d, 0x62, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x52, 0x6d, 0x62, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65,
	0x65, 0x48, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x48, 0x6b, 0x12, 0x3c, 0x0a, 0x19,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x79, 0x52, 0x6d, 0x62, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x19, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x79, 0x52, 0x6d, 0x62, 0x12, 0x3a, 0x0a, 0x18, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x79, 0x48, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x79, 0x48, 0x6b, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x79, 0x52, 0x6d, 0x62, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x79, 0x52, 0x6d, 0x62, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x79, 0x48, 0x6b, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x79, 0x48, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x79, 0x52, 0x6d, 0x62, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x79, 0x52, 0x6d, 0x62,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x79, 0x48,
	0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x4c, 0x65, 0x76, 0x79, 0x48, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x6d, 0x62, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x6d, 0x62, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x6b, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x6b,
	0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x1d, 0x0a, 0x08,
	0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x10, 0x01, 0x22, 0xc0, 0x03, 0x0a, 0x11,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x62,
	0x75, 0x79, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x10, 0x01, 0x22, 0xd9,
	0x03, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x3c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x70, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x39, 0x0a, 0x0b, 0x68, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x2e, 0x48, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x68,
	0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1e, 0x0a, 0x09, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x10, 0x01, 0x22, 0x87, 0x04, 0x0a, 0x10, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x79, 0x53, 0x74,
	0x6f, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x61, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x33, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0d, 0x0a, 0x09,
	0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x10, 0x02, 0x22, 0x91, 0x03, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x49, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x48, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x0d, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x6f, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x6e, 0x6f, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x08, 0x22, 0xa7, 0x01, 0x0a, 0x10, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a,
	0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x10, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x84, 0x02, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x55,
	0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x65,
	0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x28, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x16, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x48, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe2, 0x03, 0x0a, 0x10, 0x45, 0x6e,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x0b,
	0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x62,
	0x75, 0x79, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x10, 0x01, 0x22, 0xe9,
	0x0b, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x4e,
	0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x4e, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x61, 0x78,
	0x52, 0x6d, 0x62, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x54, 0x61, 0x78, 0x52, 0x6d, 0x62, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54,
	0x61, 0x78, 0x48, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x54, 0x61, 0x78, 0x48, 0x6b, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x6d, 0x62, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x52, 0x6d, 0x62, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x48, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x48, 0x6b,
	0x12, 0x2e, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x6d, 0x62, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x52, 0x6d, 0x62,
	0x12, 0x2c, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74,
	0x69, 0x65, 0x73, 0x48, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x48, 0x6b, 0x12, 0x2e,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x79, 0x52, 0x6d, 0x62, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x79, 0x52, 0x6d, 0x62, 0x12, 0x2c,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x79, 0x48, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x79, 0x48, 0x6b, 0x12, 0x2e, 0x0a, 0x12,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x52,
	0x6d, 0x62, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x52, 0x6d, 0x62, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x48,
	0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x48, 0x6b, 0x12, 0x3c, 0x0a, 0x19, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x79, 0x52, 0x6d, 0x62, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x79, 0x52, 0x6d, 0x62, 0x12, 0x3a, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x79, 0x48, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x79, 0x48, 0x6b, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x79, 0x52, 0x6d, 0x62, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x79, 0x52, 0x6d, 0x62, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x79, 0x48, 0x6b, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x79, 0x48, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x4c, 0x65, 0x76, 0x79, 0x52, 0x6d, 0x62, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x79, 0x52, 0x6d, 0x62, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x79, 0x48, 0x6b, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x65,
	0x76, 0x79, 0x48, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x6d, 0x62, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x6d, 0x62, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x6b, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x6b, 0x12, 0x2a,
	0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x1e, 0x0a, 0x09, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x10, 0x01, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x54,
	0x30, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x30, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0c, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x30, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x74, 0x30, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x22, 0xfa, 0x03, 0x0a, 0x12, 0x54, 0x30,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x30, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x30, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x30, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x30, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf0, 0x01, 0x0a, 0x14, 0x54, 0x30, 0x55, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x61, 0x6e, 0x42, 0x75, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x6e,
	0x42, 0x75, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x22, 0x94, 0x02, 0x0a, 0x16, 0x54, 0x30,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x30,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x52, 0x12, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x30,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x74, 0x30, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x44, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x64, 0x61, 0x79,
	0x44, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x30,
	0x54, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x74, 0x30, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x22, 0x92, 0x05, 0x0a, 0x1e, 0x54, 0x30, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x30, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x30, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x30, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x30, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x75, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x62, 0x75, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12,
	0x2c, 0x0a, 0x11, 0x74, 0x30, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x30, 0x54, 0x6f,
	0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x30, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x30, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x44, 0x65, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x64,
	0x61, 0x79, 0x44, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x42, 0x75, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x42, 0x75, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x53, 0x65, 0x6c, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x6f,
	0x64, 0x61, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x44, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x44, 0x65, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x1f, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x40, 0x0a, 0x12, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xaf, 0x03, 0x0a,
	0x07, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x69, 0x67,
	0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x23,
	0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x22, 0xa0, 0x03, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x44, 0x75, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x44, 0x75, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x46, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x46, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x46, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46,
	0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x46, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x46, 0x65, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x50, 0x75, 0x73, 0x68, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0xd9, 0x08, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78,
	0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x64, 0x61, 0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x44,
	0x61, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x44, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x78, 0x65, 0x63, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2e,
	0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xf4, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0x5b, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x50, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x31, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x18, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x60, 0x0a, 0x1a, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x64, 0x12, 0x42, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0x2a, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5f, 0x0a,
	0x19, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x75,
	0x0a, 0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x49, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x59, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0xae, 0x01, 0x0a, 0x14, 0x48, 0x6b, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x53,
	0x48, 0x48, 0x4b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x53, 0x48, 0x48,
	0x4b, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x53, 0x5a, 0x48, 0x4b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x73, 0x53, 0x5a, 0x48, 0x4b, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x22, 0xb0, 0x03, 0x0a, 0x1e, 0x48, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x15, 0x73, 0x7a, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x2e, 0x48, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x15, 0x73, 0x7a, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x48,
	0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x15, 0x73, 0x68, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x68, 0x0a, 0x1b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x7a, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6c, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x2e, 0x48, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x1b, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x7a, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x1b, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x48, 0x6b, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x1b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x68, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x22, 0x7a, 0x0a, 0x1a, 0x48, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x75, 0x79,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65,
	0x2a, 0x7f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x48, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x53, 0x5a, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x53, 0x68, 0x61, 0x72, 0x65, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x5a, 0x5f, 0x48, 0x4b, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x48,
	0x5f, 0x48, 0x4b, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x4b, 0x5f, 0x41, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10,
	0x05, 0x2a, 0x4a, 0x0a, 0x0b, 0x48, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x10, 0x02, 0x42, 0x0e, 0x5a,
	0x0c, 0x2e, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_desc_ApiTradeUjuStock_proto_rawDescOnce sync.Once
	file_desc_ApiTradeUjuStock_proto_rawDescData = file_desc_ApiTradeUjuStock_proto_rawDesc
)

func file_desc_ApiTradeUjuStock_proto_rawDescGZIP() []byte {
	file_desc_ApiTradeUjuStock_proto_rawDescOnce.Do(func() {
		file_desc_ApiTradeUjuStock_proto_rawDescData = protoimpl.X.CompressGZIP(file_desc_ApiTradeUjuStock_proto_rawDescData)
	})
	return file_desc_ApiTradeUjuStock_proto_rawDescData
}

var file_desc_ApiTradeUjuStock_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_desc_ApiTradeUjuStock_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_desc_ApiTradeUjuStock_proto_goTypes = []interface{}{
	(TradeExchangeType)(0),                 // 0: tradeStock.TradeExchangeType
	(HkPriceType)(0),                       // 1: tradeStock.HkPriceType
	(Header_Type)(0),                       // 2: tradeStock.Header.Type
	(LoginRespMessage_LoginResult)(0),      // 3: tradeStock.LoginRespMessage.LoginResult
	(ReqMessage_ReqMsgType)(0),             // 4: tradeStock.ReqMessage.ReqMsgType
	(RespMessage_RespCode)(0),              // 5: tradeStock.RespMessage.RespCode
	(EntrustInfoResp_EntrustType)(0),       // 6: tradeStock.EntrustInfoResp.EntrustType
	(EntrustInfoResp_EntrustStatus)(0),     // 7: tradeStock.EntrustInfoResp.EntrustStatus
	(DealInfoResp_DealType)(0),             // 8: tradeStock.DealInfoResp.DealType
	(StatementInfoResp_StatementType)(0),   // 9: tradeStock.StatementInfoResp.StatementType
	(OrderReq_OrderType)(0),                // 10: tradeStock.OrderReq.OrderType
	(PassiveOrderInfo_OrderFlag)(0),        // 11: tradeStock.PassiveOrderInfo.OrderFlag
	(OrderResp_OrderRespType)(0),           // 12: tradeStock.OrderResp.OrderRespType
	(CancelOrderResp_CancelOrderType)(0),   // 13: tradeStock.CancelOrderResp.CancelOrderType
	(EntrustBasicInfo_EntrustType)(0),      // 14: tradeStock.EntrustBasicInfo.EntrustType
	(DealResp_OrderType)(0),                // 15: tradeStock.DealResp.OrderType
	(*WCMessage)(nil),                      // 16: tradeStock.WCMessage
	(*ErrorMessage)(nil),                   // 17: tradeStock.ErrorMessage
	(*Header)(nil),                         // 18: tradeStock.Header
	(*LoginReqMessage)(nil),                // 19: tradeStock.LoginReqMessage
	(*LoginRespMessage)(nil),               // 20: tradeStock.LoginRespMessage
	(*ReqMessage)(nil),                     // 21: tradeStock.ReqMessage
	(*RespMessage)(nil),                    // 22: tradeStock.RespMessage
	(*StockQryResp)(nil),                   // 23: tradeStock.StockQryResp
	(*AccountInfoResp)(nil),                // 24: tradeStock.AccountInfoResp
	(*PositionInfoResp)(nil),               // 25: tradeStock.PositionInfoResp
	(*EntrustInfoResp)(nil),                // 26: tradeStock.EntrustInfoResp
	(*DealInfoResp)(nil),                   // 27: tradeStock.DealInfoResp
	(*StatementInfoResp)(nil),              // 28: tradeStock.StatementInfoResp
	(*OrderReq)(nil),                       // 29: tradeStock.OrderReq
	(*PassiveOrderInfo)(nil),               // 30: tradeStock.PassiveOrderInfo
	(*OrderResp)(nil),                      // 31: tradeStock.OrderResp
	(*OrderConfirmResp)(nil),               // 32: tradeStock.OrderConfirmResp
	(*CancelOrderResp)(nil),                // 33: tradeStock.CancelOrderResp
	(*CancelOrderConfirmResp)(nil),         // 34: tradeStock.CancelOrderConfirmResp
	(*EntrustBasicInfo)(nil),               // 35: tradeStock.EntrustBasicInfo
	(*DealResp)(nil),                       // 36: tradeStock.DealResp
	(*T0PositionStatisticsResp)(nil),       // 37: tradeStock.T0PositionStatisticsResp
	(*T0PositionInfoResp)(nil),             // 38: tradeStock.T0PositionInfoResp
	(*T0UsablePositionResp)(nil),           // 39: tradeStock.T0UsablePositionResp
	(*T0ProfitStatisticsResp)(nil),         // 40: tradeStock.T0ProfitStatisticsResp
	(*T0PositionProfitStatisticsResp)(nil), // 41: tradeStock.T0PositionProfitStatisticsResp
	(*AddOptReq)(nil),                      // 42: tradeStock.AddOptReq
	(*DeleteOptReq)(nil),                   // 43: tradeStock.DeleteOptReq
	(*ModifyOptRemarkReq)(nil),             // 44: tradeStock.ModifyOptRemarkReq
	(*OptResp)(nil),                        // 45: tradeStock.OptResp
	(*RemarkReq)(nil),                      // 46: tradeStock.RemarkReq
	(*CommissionTemplate)(nil),             // 47: tradeStock.CommissionTemplate
	(*PushCommissionTemplate)(nil),         // 48: tradeStock.PushCommissionTemplate
	(*ConditionOrder)(nil),                 // 49: tradeStock.ConditionOrder
	(*ConditionOrderAddReq)(nil),           // 50: tradeStock.ConditionOrderAddReq
	(*ConditionOrderAddResp)(nil),          // 51: tradeStock.ConditionOrderAddResp
	(*ConditionOrderChangeStatusReq)(nil),  // 52: tradeStock.ConditionOrderChangeStatusReq
	(*ConditionOrderChangeStatusResp)(nil), // 53: tradeStock.ConditionOrderChangeStatusResp
	(*ConditionOrderDeleteReq)(nil),        // 54: tradeStock.ConditionOrderDeleteReq
	(*ConditionOrderDeleteResp)(nil),       // 55: tradeStock.ConditionOrderDeleteResp
	(*PushConditionOrderTriggerd)(nil),     // 56: tradeStock.PushConditionOrderTriggerd
	(*ConditionOrderConfirmReq)(nil),       // 57: tradeStock.ConditionOrderConfirmReq
	(*ConditionOrderConfirmResp)(nil),      // 58: tradeStock.ConditionOrderConfirmResp
	(*BatchOrderResp)(nil),                 // 59: tradeStock.BatchOrderResp
	(*ChangePasswordReq)(nil),              // 60: tradeStock.ChangePasswordReq
	(*HkStockInfoFieldResp)(nil),           // 61: tradeStock.HkStockInfoFieldResp
	(*HkConsultExchangeRateFieldResp)(nil), // 62: tradeStock.HkConsultExchangeRateFieldResp
	(*HkConsultExchangeRateField)(nil),     // 63: tradeStock.HkConsultExchangeRateField
}
var file_desc_ApiTradeUjuStock_proto_depIdxs = []int32{
	18, // 0: tradeStock.WCMessage.header:type_name -> tradeStock.Header
	21, // 1: tradeStock.WCMessage.reqMessage:type_name -> tradeStock.ReqMessage
	19, // 2: tradeStock.WCMessage.loginReqMessage:type_name -> tradeStock.LoginReqMessage
	20, // 3: tradeStock.WCMessage.loginRespMessage:type_name -> tradeStock.LoginRespMessage
	22, // 4: tradeStock.WCMessage.respMessage:type_name -> tradeStock.RespMessage
	17, // 5: tradeStock.WCMessage.errorMessage:type_name -> tradeStock.ErrorMessage
	2,  // 6: tradeStock.Header.type:type_name -> tradeStock.Header.Type
	3,  // 7: tradeStock.LoginRespMessage.loginResult:type_name -> tradeStock.LoginRespMessage.LoginResult
	24, // 8: tradeStock.LoginRespMessage.accountInfoResp:type_name -> tradeStock.AccountInfoResp
	4,  // 9: tradeStock.ReqMessage.type:type_name -> tradeStock.ReqMessage.ReqMsgType
	29, // 10: tradeStock.ReqMessage.orderReq:type_name -> tradeStock.OrderReq
	42, // 11: tradeStock.ReqMessage.addOptReq:type_name -> tradeStock.AddOptReq
	43, // 12: tradeStock.ReqMessage.deleteOptReq:type_name -> tradeStock.DeleteOptReq
	46, // 13: tradeStock.ReqMessage.remarkReq:type_name -> tradeStock.RemarkReq
	44, // 14: tradeStock.ReqMessage.modifyOptRemarkReq:type_name -> tradeStock.ModifyOptRemarkReq
	29, // 15: tradeStock.ReqMessage.batchOrder:type_name -> tradeStock.OrderReq
	50, // 16: tradeStock.ReqMessage.conditionOrderAddReq:type_name -> tradeStock.ConditionOrderAddReq
	52, // 17: tradeStock.ReqMessage.conditionOrderChangeStatusReq:type_name -> tradeStock.ConditionOrderChangeStatusReq
	54, // 18: tradeStock.ReqMessage.conditionOrderDeleteReq:type_name -> tradeStock.ConditionOrderDeleteReq
	57, // 19: tradeStock.ReqMessage.ConditionOrderConfirmReq:type_name -> tradeStock.ConditionOrderConfirmReq
	60, // 20: tradeStock.ReqMessage.changePasswordReq:type_name -> tradeStock.ChangePasswordReq
	5,  // 21: tradeStock.RespMessage.respCode:type_name -> tradeStock.RespMessage.RespCode
	23, // 22: tradeStock.RespMessage.stockQryResp:type_name -> tradeStock.StockQryResp
	25, // 23: tradeStock.RespMessage.positionInfoResp:type_name -> tradeStock.PositionInfoResp
	24, // 24: tradeStock.RespMessage.accountInfoResp:type_name -> tradeStock.AccountInfoResp
	26, // 25: tradeStock.RespMessage.etrustInfoResp:type_name -> tradeStock.EntrustInfoResp
	27, // 26: tradeStock.RespMessage.dealInfoResp:type_name -> tradeStock.DealInfoResp
	28, // 27: tradeStock.RespMessage.statementInfoResp:type_name -> tradeStock.StatementInfoResp
	33, // 28: tradeStock.RespMessage.cancelOrderResp:type_name -> tradeStock.CancelOrderResp
	31, // 29: tradeStock.RespMessage.orderResp:type_name -> tradeStock.OrderResp
	36, // 30: tradeStock.RespMessage.dealResp:type_name -> tradeStock.DealResp
	32, // 31: tradeStock.RespMessage.orderCnfmResp:type_name -> tradeStock.OrderConfirmResp
	34, // 32: tradeStock.RespMessage.cancelOrderCnfmResp:type_name -> tradeStock.CancelOrderConfirmResp
	37, // 33: tradeStock.RespMessage.t0PositionStatisticsResp:type_name -> tradeStock.T0PositionStatisticsResp
	39, // 34: tradeStock.RespMessage.t0UsablePositionResp:type_name -> tradeStock.T0UsablePositionResp
	40, // 35: tradeStock.RespMessage.t0ProfitStatisticsResp:type_name -> tradeStock.T0ProfitStatisticsResp
	25, // 36: tradeStock.RespMessage.pushPositionInfoResp:type_name -> tradeStock.PositionInfoResp
	26, // 37: tradeStock.RespMessage.pushEntrustInfoResp:type_name -> tradeStock.EntrustInfoResp
	24, // 38: tradeStock.RespMessage.pushAccountInfoResp:type_name -> tradeStock.AccountInfoResp
	45, // 39: tradeStock.RespMessage.optResp:type_name -> tradeStock.OptResp
	33, // 40: tradeStock.RespMessage.batchCancelOrderResp:type_name -> tradeStock.CancelOrderResp
	48, // 41: tradeStock.RespMessage.pushCommissionTemplate:type_name -> tradeStock.PushCommissionTemplate
	59, // 42: tradeStock.RespMessage.batchOrderResp:type_name -> tradeStock.BatchOrderResp
	49, // 43: tradeStock.RespMessage.conditionOrderList:type_name -> tradeStock.ConditionOrder
	51, // 44: tradeStock.RespMessage.conditionOrderAddResp:type_name -> tradeStock.ConditionOrderAddResp
	53, // 45: tradeStock.RespMessage.conditionOrderChangeStatusResp:type_name -> tradeStock.ConditionOrderChangeStatusResp
	55, // 46: tradeStock.RespMessage.conditionOrderDeleteResp:type_name -> tradeStock.ConditionOrderDeleteResp
	56, // 47: tradeStock.RespMessage.pushConditionOrderTriggerd:type_name -> tradeStock.PushConditionOrderTriggerd
	58, // 48: tradeStock.RespMessage.ConditionOrderConfirmResp:type_name -> tradeStock.ConditionOrderConfirmResp
	61, // 49: tradeStock.RespMessage.stockInfoFieldResp:type_name -> tradeStock.HkStockInfoFieldResp
	62, // 50: tradeStock.RespMessage.hkConsultExchangeRateFieldResp:type_name -> tradeStock.HkConsultExchangeRateFieldResp
	47, // 51: tradeStock.AccountInfoResp.commissionTemplate:type_name -> tradeStock.CommissionTemplate
	0,  // 52: tradeStock.PositionInfoResp.exchangeType:type_name -> tradeStock.TradeExchangeType
	6,  // 53: tradeStock.EntrustInfoResp.entrustType:type_name -> tradeStock.EntrustInfoResp.EntrustType
	0,  // 54: tradeStock.EntrustInfoResp.exchangeType:type_name -> tradeStock.TradeExchangeType
	8,  // 55: tradeStock.DealInfoResp.dealType:type_name -> tradeStock.DealInfoResp.DealType
	0,  // 56: tradeStock.DealInfoResp.exchangeType:type_name -> tradeStock.TradeExchangeType
	9,  // 57: tradeStock.StatementInfoResp.statementType:type_name -> tradeStock.StatementInfoResp.StatementType
	10, // 58: tradeStock.OrderReq.orderType:type_name -> tradeStock.OrderReq.OrderType
	30, // 59: tradeStock.OrderReq.passiveOrderInfo:type_name -> tradeStock.PassiveOrderInfo
	1,  // 60: tradeStock.OrderReq.hkPriceType:type_name -> tradeStock.HkPriceType
	11, // 61: tradeStock.PassiveOrderInfo.orderFlag:type_name -> tradeStock.PassiveOrderInfo.OrderFlag
	12, // 62: tradeStock.OrderResp.orderRespType:type_name -> tradeStock.OrderResp.OrderRespType
	35, // 63: tradeStock.OrderResp.entrustBasicInfo:type_name -> tradeStock.EntrustBasicInfo
	12, // 64: tradeStock.OrderConfirmResp.orderRespType:type_name -> tradeStock.OrderResp.OrderRespType
	35, // 65: tradeStock.OrderConfirmResp.entrustBasicInfo:type_name -> tradeStock.EntrustBasicInfo
	13, // 66: tradeStock.CancelOrderResp.cancelOrderType:type_name -> tradeStock.CancelOrderResp.CancelOrderType
	35, // 67: tradeStock.CancelOrderResp.entrustBasicInfo:type_name -> tradeStock.EntrustBasicInfo
	12, // 68: tradeStock.CancelOrderConfirmResp.orderRespType:type_name -> tradeStock.OrderResp.OrderRespType
	35, // 69: tradeStock.CancelOrderConfirmResp.entrustBasicInfo:type_name -> tradeStock.EntrustBasicInfo
	14, // 70: tradeStock.EntrustBasicInfo.entrustType:type_name -> tradeStock.EntrustBasicInfo.EntrustType
	15, // 71: tradeStock.DealResp.orderType:type_name -> tradeStock.DealResp.OrderType
	0,  // 72: tradeStock.DealResp.exchangeType:type_name -> tradeStock.TradeExchangeType
	38, // 73: tradeStock.T0PositionStatisticsResp.positionInfo:type_name -> tradeStock.T0PositionInfoResp
	41, // 74: tradeStock.T0ProfitStatisticsResp.positionProfitResp:type_name -> tradeStock.T0PositionProfitStatisticsResp
	47, // 75: tradeStock.PushCommissionTemplate.commissionTemplate:type_name -> tradeStock.CommissionTemplate
	24, // 76: tradeStock.ConditionOrder.accountInfo:type_name -> tradeStock.AccountInfoResp
	49, // 77: tradeStock.ConditionOrderAddResp.conditionOrder:type_name -> tradeStock.ConditionOrder
	49, // 78: tradeStock.PushConditionOrderTriggerd.conditionOrder:type_name -> tradeStock.ConditionOrder
	49, // 79: tradeStock.ConditionOrderConfirmResp.conditionOrder:type_name -> tradeStock.ConditionOrder
	12, // 80: tradeStock.BatchOrderResp.orderRespType:type_name -> tradeStock.OrderResp.OrderRespType
	63, // 81: tradeStock.HkConsultExchangeRateFieldResp.szConsultExchangeRate:type_name -> tradeStock.HkConsultExchangeRateField
	63, // 82: tradeStock.HkConsultExchangeRateFieldResp.shConsultExchangeRate:type_name -> tradeStock.HkConsultExchangeRateField
	63, // 83: tradeStock.HkConsultExchangeRateFieldResp.settleSzConsultExchangeRate:type_name -> tradeStock.HkConsultExchangeRateField
	63, // 84: tradeStock.HkConsultExchangeRateFieldResp.settleShConsultExchangeRate:type_name -> tradeStock.HkConsultExchangeRateField
	85, // [85:85] is the sub-list for method output_type
	85, // [85:85] is the sub-list for method input_type
	85, // [85:85] is the sub-list for extension type_name
	85, // [85:85] is the sub-list for extension extendee
	0,  // [0:85] is the sub-list for field type_name
}

func init() { file_desc_ApiTradeUjuStock_proto_init() }
func file_desc_ApiTradeUjuStock_proto_init() {
	if File_desc_ApiTradeUjuStock_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_desc_ApiTradeUjuStock_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WCMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReqMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRespMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockQryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrustInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DealInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatementInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassiveOrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderConfirmResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderConfirmResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrustBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DealResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*T0PositionStatisticsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*T0PositionInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*T0UsablePositionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*T0ProfitStatisticsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*T0PositionProfitStatisticsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyOptRemarkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemarkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommissionTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushCommissionTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOrderAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOrderAddResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOrderChangeStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOrderChangeStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOrderDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOrderDeleteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushConditionOrderTriggerd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOrderConfirmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOrderConfirmResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HkStockInfoFieldResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HkConsultExchangeRateFieldResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_ApiTradeUjuStock_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HkConsultExchangeRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_desc_ApiTradeUjuStock_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_desc_ApiTradeUjuStock_proto_goTypes,
		DependencyIndexes: file_desc_ApiTradeUjuStock_proto_depIdxs,
		EnumInfos:         file_desc_ApiTradeUjuStock_proto_enumTypes,
		MessageInfos:      file_desc_ApiTradeUjuStock_proto_msgTypes,
	}.Build()
	File_desc_ApiTradeUjuStock_proto = out.File
	file_desc_ApiTradeUjuStock_proto_rawDesc = nil
	file_desc_ApiTradeUjuStock_proto_goTypes = nil
	file_desc_ApiTradeUjuStock_proto_depIdxs = nil
}
